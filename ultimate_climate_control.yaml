blueprint:
  name: Ultimate Smart Climate Control - v2.0
  description: >-
    📌 Version: 2.0.0
    
    
    🌡️ INTELLIGENT CLIMATE CONTROL with power-efficient operation, proximity-based 
    pre-conditioning, and presence detection. Control multiple A/C units with full 
    customization of temperatures, distances, and operating modes.
    
    💡 POWER SAVING MODE: Configured to turn OFF in comfort zone (saves 40-60% energy)
    with wider temperature tolerance (±2°C) and extended cycling protection.
    
    🔄 UNIVERSAL COMPATIBILITY: Auto-detects and adapts to different A/C models:
    • HVAC modes: auto ↔ heat_cool, supports all Daikin variants
    • Fan speeds: Level 5 ↔ 5, Auto ↔ auto, Quiet ↔ Silence  
    • Swing modes: Both ↔ both, Vertical ↔ vertical, 3D ↔ both
    
    🏠 SMART MODE PRESENCE: Room-specific climate control based on occupancy:
    • Room occupied: Normal temperature control
    • Room empty (timeout): Configurable eco/off/maintain behavior  
    • Away from house: Global away mode (separate setting)
    
    
    🧠 CONTROL MODES EXPLAINED:
    
    • AUTO MODE: Full automation with occupancy detection and presence-based control. 
      System automatically adjusts temperature when you're home or away.
    
    • MANUAL MODE: Full manual control with no automation. 
      You control temperature, fan speed, and on/off manually.
    
    • SMART MODE: Aggressive presence detection and advanced occupancy sensing. 
      Uses motion sensors, door sensors, phone presence, and predictive algorithms 
      to optimize temperature before occupancy and maintain comfort during use.
      🌡️ NEW: Temperature Stability Auto-Off - automatically turns off AC when 
      temperature equilibrium is reached (configurable tolerance & duration).
    
    
    ⚡ KEY FEATURES:
    
    • Smart Mode Control - Auto/Manual/Smart modes with presence timeout
    
    • Room-Specific Presence - BLE/PIR sensors for accurate occupancy
    
    • Proximity Zones - Different behaviors based on distance from home
    
    • Eco Mode - Reduces energy use by 30-40% vs on/off cycling
    
    • Smart Pre-conditioning - Activates when approaching home
    
    • Multi-Zone Support - Control 1 or many A/C units
    
    • Gradual Adjustments - Prevents aggressive cycling
    
    • Runtime Protection - Extends equipment life
    
    
    ⚠️ REQUIRED SETUP - Create unique helpers for EACH room/automation:
    
    
    1️⃣ Input Text Helper (unique per room):
    
    • Living Room: input_text.climate_last_mode_living_room
    
    • Bedroom: input_text.climate_last_mode_bedroom
    
    • Office: input_text.climate_last_mode_office
    
    • Icon: mdi:air-conditioner
    
    
    2️⃣ Input DateTime Helper (unique per room):
    
    • Living Room: input_datetime.climate_last_change_living_room
    
    • Bedroom: input_datetime.climate_last_change_bedroom  
    
    • Office: input_datetime.climate_last_change_office
    
    • Has date: ✅ Yes
    
    • Has time: ✅ Yes
    
    • Icon: mdi:clock-outline
    
    
    🧠 SMART MODE HELPERS (for advanced control):
    
    • input_select.climate_control_mode_[room] (Auto/Manual/Smart modes)
    
    • input_datetime.presence_last_detected_[room] (presence timeout tracking)
    
    • input_boolean.climate_proximity_override_[room] (emergency override)
    
    
    🧠 DYNAMIC ADAPTATION HELPERS (for smart escalation):
    
    • input_number.climate_temp_history_[room] (temperature tracking)
    
    • input_text.climate_trend_direction_[room] (rising/falling/stable)
    
    • input_datetime.climate_mode_start_time_[room] (when current mode started)
    
    • input_number.climate_effectiveness_score_[room] (0-100, how well it's working)
    
    
    📍 Create via: Settings → Devices & Services → Helpers → Create Helper
    
    
    3️⃣ PROXIMITY SENSORS - Set up via Integration:
    
    1. Go to Settings → Devices & Services → Integrations
    2. Click "+ ADD INTEGRATION" 
    3. Search for and select "Proximity"
    4. Configure:
       • Name: "Home"
       • Zone: Select your "Home" zone
       • Devices: Select your person entities
       • Tolerance: 50m (prevents GPS jitter updates)
    
    This creates:
    • sensor.home_nearest_distance (distance in meters)
    • sensor.home_nearest_direction_of_travel (towards/away/stationary/arrived)
    
    
    📊 Optional Energy Tracking:
    
    • input_number.climate_power_saving_score (efficiency %)
    
    • sensor.climate_runtime_today (daily runtime tracking)
    
    • sensor.climate_efficiency_rating (efficiency score)
  domain: automation
  source_url: https://github.com/yourusername/ultimate-climate-control
  input:
    # Basic required settings (always visible)
    climate_entities:
      name: Climate Entities *
      description: Select one or more A/C units to control
      selector:
        entity:
          multiple: true
          domain: climate
    
    helper_last_mode:
      name: Last Mode Helper Entity *
      description: >
        Input Text helper to track last climate mode.
        Create unique helper for each room/automation:
        Examples: input_text.climate_last_mode_living_room,
        input_text.climate_last_mode_bedroom
      selector:
        entity:
          domain: input_text
    
    helper_last_change:
      name: Last Change Helper Entity *
      description: >
        Input DateTime helper to track last change time.
        Create unique helper for each room/automation:
        Examples: input_datetime.climate_last_change_living_room,
        input_datetime.climate_last_change_bedroom
      selector:
        entity:
          domain: input_datetime

    # Temperature Settings - Simple Mode
    temperature_settings:
      name: "Temperature Settings"
      icon: mdi:thermometer
      collapsed: false
      input:
        temperature_sensor:
          name: Temperature Sensor (Optional)
          description: >
            External temperature sensor for more accurate readings. 
            If not set, uses the A/C's internal sensor (less accurate).
            Recommended: Use a sensor placed at seated height in the room center.
          default: []
          selector:
            entity:
              domain: sensor
              device_class: temperature
        
        use_average_temperature:
          name: Use Average Temperature
          description: >
            When using multiple A/C units, average all their temperatures.
            Turn OFF if using a single external sensor for all units.
          default: true
          selector:
            boolean:
        
        # SIMPLE CONTROLS (Always visible)
        target_temperature:
          name: 🎯 Target Temperature
          description: >
            Your ideal room temperature - changes ALL zones proportionally.
            This is where the system will maintain temperature in auto mode.
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
              mode: slider
        
        comfort_zone_width:
          name: 📏 Comfort Zone Range
          description: >
            Temperature variation tolerance around target (±°C):
            
            • Wider = more tolerance, less switching, more efficient
            
            • Narrower = tighter control, more activity, less efficient
            
            
            Example: Target 23°C with ±2°C = comfort zone 21-25°C (saves 40-60% power)
          default: 2
          selector:
            number:
              min: 0.5
              max: 3
              step: 0.5
              unit_of_measurement: "°C"
              mode: slider
        
        temperature_aggressiveness:
          name: ⚡ Response Aggressiveness
          description: >
            How quickly system responds beyond comfort zone:
            
            • 1 = Gentle (extreme modes at ±3°C from comfort, slow, very efficient)
            
            • 2 = Smooth (medium at comfort edge, high at +1°C, max at +2°C)
            
            • 3 = Balanced (extreme modes at ±2°C from comfort, good balance)
            
            • 5 = Aggressive (extreme modes at ±1°C from comfort, fast, less efficient)
            
            
            Example (Target 23°C, Zone ±2°C, Aggressiveness 2):
            
            • Comfort: 21-25°C (OFF mode for power savings)
            
            • Medium: 25°C & 21°C (gentle response at comfort edge)
            
            • High: 26°C & 20°C (strong response at ±1°C from edge)
          default: 2
          selector:
            number:
              min: 1
              max: 5
              step: 1
              mode: slider
        
        # ADVANCED OVERRIDES (Hidden by default)
        enable_advanced_temp:
          name: 🔧 Enable Advanced Temperature Controls
          description: Manually override individual temperature thresholds
          default: false
          selector:
            boolean:
        
        # These are only shown when advanced mode is enabled
        comfort_min_temp:
          name: Comfort Zone Minimum (Advanced)
          description: Override auto-calculated minimum
          default: 21
          selector:
            number:
              min: 18
              max: 25
              step: 0.5
              unit_of_measurement: "°C"
        
        comfort_max_temp:
          name: Comfort Zone Maximum (Advanced)
          description: Override auto-calculated maximum
          default: 23
          selector:
            number:
              min: 20
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        cooling_target_temp:
          name: Cooling Target (Advanced)
          description: Override cooling target
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        heating_target_temp:
          name: Heating Target (Advanced)
          description: Override heating target
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        precool_target_temp:
          name: Pre-cooling Target (Advanced)
          description: Override pre-conditioning target
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        cooling_high_temp:
          name: High Cooling Threshold (Advanced)
          description: Override maximum cooling trigger
          default: 26
          selector:
            number:
              min: 20
              max: 35
              step: 0.5
              unit_of_measurement: "°C"
        
        cooling_medium_temp:
          name: Medium Cooling Threshold (Advanced)
          description: Override medium cooling trigger
          default: 24
          selector:
            number:
              min: 20
              max: 35
              step: 0.5
              unit_of_measurement: "°C"
        
        heating_low_temp:
          name: Low Heating Threshold (Advanced)
          description: Override maximum heating trigger
          default: 18
          selector:
            number:
              min: 10
              max: 25
              step: 0.5
              unit_of_measurement: "°C"
        
        heating_medium_temp:
          name: Medium Heating Threshold (Advanced)
          description: Override medium heating trigger
          default: 20
          selector:
            number:
              min: 10
              max: 25
              step: 0.5
              unit_of_measurement: "°C"

    # Presence & Proximity Settings
    presence_settings:
      name: "Presence & Proximity"
      icon: mdi:account-multiple
      collapsed: true
      input:
        presence_persons:
          name: People to Track
          description: Select people for presence detection
          default: []
          selector:
            entity:
              multiple: true
              domain: person
        
        presence_devices:
          name: Presence Detection Devices
          description: Additional devices indicating presence (e.g., PC power states)
          default: []
          selector:
            entity:
              multiple: true
        
        proximity_sensor:
          name: Proximity Distance Sensor
          description: Sensor tracking nearest person's distance from home
          default: sensor.home_nearest_distance
          selector:
            entity:
              domain: sensor
        
        direction_sensor:
          name: Direction of Travel Sensor
          description: Sensor tracking direction of travel (towards/away/arrived)
          default: sensor.home_nearest_direction_of_travel
          selector:
            entity:
              domain: sensor
        
        home_zone_distance:
          name: Home Zone Distance
          description: >
            Distance defining your "home zone" boundary. Controls all proximity behaviors:
            • Within this distance: Maintain comfort temperature, pre-condition when approaching
            • Beyond this distance: Switch to away mode (off or eco mode)
          default: 5000
          selector:
            number:
              min: 1000
              max: 10000
              step: 500
              unit_of_measurement: m

    # Away Mode Settings
    away_settings:
      name: "Away Mode Settings"
      icon: mdi:home-export-outline
      collapsed: true
      input:
        enable_away_mode:
          name: Enable Away Mode
          description: Turn off or set to eco when everyone leaves
          default: true
          selector:
            boolean:
        
        away_mode_action:
          name: Away Mode Action
          description: >
            What to do when everyone leaves home:
            • OFF: Turn AC completely off (saves most energy, slow to cool when returning)
            • ECO: Reduce to eco mode with wider temperature range (balanced energy savings)
            • MAINTAIN: Keep current temperature (wastes energy but fastest comfort when returning)
          default: "eco"
          selector:
            select:
              options:
                - "off"
                - "eco"
                - "maintain"
        
        enable_pre_conditioning:
          name: Enable Pre-conditioning
          description: Pre-cool/heat when approaching home
          default: true
          selector:
            boolean:

    # Smart Mode Settings
    smart_mode_settings:
      name: "Smart Mode Settings"
      icon: mdi:brain
      collapsed: true
      input:
        helper_control_mode:
          name: Control Mode Helper Entity
          description: >
            Input Select helper for control mode (Auto/Manual/Smart).
            Example: input_select.climate_control_mode_living_room
          selector:
            entity:
              domain: input_select
        
        helper_presence_detected:
          name: Last Presence Helper Entity
          description: >
            Input DateTime helper to track when presence was last detected.
            Example: input_datetime.presence_last_detected_living_room
          selector:
            entity:
              domain: input_datetime
        
        helper_proximity_override:
          name: Proximity Override Helper Entity
          description: >
            Input Boolean helper for emergency temperature override.
            Example: input_boolean.climate_proximity_override_living_room
          selector:
            entity:
              domain: input_boolean
        
        presence_timeout_minutes:
          name: Presence Timeout
          description: >
            Minutes to wait after leaving room before taking action.
            Prevents shutdown during brief departures (bathroom, etc.)
          default: 15
          selector:
            number:
              min: 5
              max: 60
              step: 5
              unit_of_measurement: minutes
        
        room_presence_sensors:
          name: Room Presence Sensors (Optional)
          description: >
            BLE, PIR or other sensors for room-specific presence.
            For BLE area sensors, use the sensor that reports room names (e.g., sensor.phone_ble_area).
            For PIR sensors, use binary sensors that report on/off.
          default: []
          selector:
            entity:
              multiple: true
              domain: 
                - binary_sensor
                - sensor
        
        room_name_for_ble:
          name: Room Name for BLE Detection (Optional)
          description: >
            If using BLE area sensors, specify the exact room name that indicates presence.
            Example: "Office" for sensor.phone_ble_area when it reports "Office"
          default: ""
          selector:
            text:
        
        smart_mode_behavior:
          name: Smart Mode Room Absence Behavior
          description: >
            What to do when room presence sensors detect absence (after timeout):
            • ECO: Reduce to eco mode (saves power, maintains some comfort)
            • MAINTAIN: Keep current temperature (comfort over efficiency)  
            • OFF: Turn off completely (maximum power savings)
            Only applies when still home but room is empty.
          default: "eco"
          selector:
            select:
              options:
                - "eco"
                - "maintain"
                - "off"

        temp_stability_enabled:
          name: Temperature Stability Auto-Off
          description: >
            Automatically turn off AC when temperature remains stable for specified duration.
            Detects when AC job is complete (thermal equilibrium reached) to save energy.
            Works even when people are still in room. Requires temperature history helper.
          default: false
          selector:
            boolean:

        stability_tolerance:
          name: Stability Temperature Tolerance
          description: >
            Temperature range considered "stable" (±°C from previous reading).
            Smaller values = more sensitive. Larger values = less sensitive.
            Typical: ±0.3°C for sensitive, ±0.5°C for moderate.
          default: 0.3
          selector:
            number:
              min: 0.1
              max: 5.0
              step: 0.1
              unit_of_measurement: "°C"

        stability_duration:
          name: Stability Duration
          description: >
            Minutes temperature must remain stable before auto-off triggers.
            Shorter duration = more aggressive. Longer duration = more conservative.
            Typical: 15min for efficiency, 25min for comfort.
          default: 15
          selector:
            number:
              min: 10
              max: 30
              step: 5
              unit_of_measurement: "min"

        stability_behavior:
          name: Stability Auto-Off Action  
          description: >
            What to do when temperature stability is detected:
            • OFF: Turn off completely (maximum energy savings)
            • ECO: Switch to eco mode (moderate energy savings, maintains some comfort)
          default: "off"
          selector:
            select:
              options:
                - "off"
                - "eco"

    # Fan & Swing Settings
    fan_settings:
      name: "Fan & Swing Settings"
      icon: mdi:fan
      collapsed: true
      input:
        fan_speed_max:
          name: Maximum Fan Speed
          description: Fan speed for maximum cooling/heating (auto-detects Level 5 vs 5)
          default: "Level 5"
          selector:
            select:
              options:
                - "Auto"
                - "auto"
                - "Quiet"
                - "Silence"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "1"
                - "2"
                - "3"
                - "4"
                - "5"
                - "high"
                - "medium"
                - "low"
        
        fan_speed_medium:
          name: Medium Fan Speed
          description: Fan speed for medium cooling/heating (auto-detects Level 3 vs 3)
          default: "Level 3"
          selector:
            select:
              options:
                - "Auto"
                - "auto"
                - "Quiet"
                - "Silence"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "1"
                - "2"
                - "3"
                - "4"
                - "5"
                - "high"
                - "medium"
                - "low"
        
        fan_speed_eco:
          name: Eco Fan Speed
          description: Fan speed for eco mode (comfort zone) (auto-detects Level 1 vs 1)
          default: "Level 1"
          selector:
            select:
              options:
                - "Auto"
                - "auto"
                - "Quiet"
                - "Silence"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "1"
                - "2"
                - "3"
                - "4"
                - "5"
                - "high"
                - "medium"
                - "low"
        
        swing_mode_active:
          name: Active Swing Mode
          description: Swing mode when actively cooling/heating
          default: "both"
          selector:
            select:
              options:
                - "off"
                - "both"
                - "vertical"
                - "horizontal"

    # Power Efficiency Settings
    efficiency_settings:
      name: "Power Efficiency Settings"
      icon: mdi:leaf
      collapsed: true
      input:
        enable_eco_mode:
          name: Enable Eco Mode
          description: >
            When temperature is in comfort zone:
            • ON = Eco mode (low power, maintains temp, uses ~150-250W)
            • OFF = Turn off completely (zero power, allows drift, saves more energy)
          default: false
          selector:
            boolean:
        
        eco_mode_setpoint_offset:
          name: Eco Mode Setpoint Offset
          description: Degrees to adjust setpoint in eco mode (reduces cycling)
          default: 1
          selector:
            number:
              min: 0
              max: 3
              step: 0.5
              unit_of_measurement: "°C"
        
        min_runtime_minutes:
          name: Minimum Runtime
          description: Minimum minutes A/C must run before allowing mode change
          default: 15
          selector:
            number:
              min: 5
              max: 30
              unit_of_measurement: minutes
        
        min_off_time_minutes:
          name: Minimum Off Time
          description: Minimum minutes A/C must be off before restarting
          default: 10
          selector:
            number:
              min: 3
              max: 15
              unit_of_measurement: minutes
        
        enable_gradual_adjustment:
          name: Enable Gradual Temperature Adjustment
          description: Gradually adjust temperature instead of immediate changes
          default: true
          selector:
            boolean:
        
        extreme_temp_override:
          name: Extreme Temperature Override
          description: >
            Temperature thresholds that override Manual mode for safety.
            Above high or below low will activate climate even in Manual mode.
          default: true
          selector:
            boolean:
        
        extreme_high_temp:
          name: Extreme High Temperature
          description: Safety threshold - activate cooling even in Manual mode
          default: 30
          selector:
            number:
              min: 28
              max: 35
              step: 0.5
              unit_of_measurement: "°C"
        
        extreme_low_temp:
          name: Extreme Low Temperature
          description: Safety threshold - activate heating even in Manual mode
          default: 15
          selector:
            number:
              min: 10
              max: 18
              step: 0.5
              unit_of_measurement: "°C"

    # Advanced Settings
    advanced_settings:
      name: "Advanced Settings"
      icon: mdi:cog
      collapsed: true
      input:
        enable_dynamic_adaptation:
          name: Enable Dynamic Adaptation
          description: >
            Automatically escalate/de-escalate cooling/heating power based on effectiveness.
            System learns and adjusts when current mode isn't reaching target temperature.
          default: true
          selector:
            boolean:
        
        effectiveness_check_minutes:
          name: Effectiveness Check Interval
          description: Minutes to wait before checking if current mode is working
          default: 10
          selector:
            number:
              min: 5
              max: 30
              unit_of_measurement: minutes
        
        escalation_temp_tolerance:
          name: Temperature Stall Tolerance
          description: >
            Degrees of acceptable temperature drift before escalating power.
            Lower = more aggressive, Higher = more patient
          default: 1.0
          selector:
            number:
              min: 0.5
              max: 3.0
              step: 0.5
              unit_of_measurement: "°C"
        
        deescalation_approach_threshold:
          name: De-escalation Approach Threshold
          description: >
            Degrees from target when system can de-escalate power.
            When within this range and trending correctly, reduce power.
          default: 2.0
          selector:
            number:
              min: 1.0
              max: 4.0
              step: 0.5
              unit_of_measurement: "°C"
        
        helper_temp_history:
          name: Temperature History Helper (Optional)
          description: >
            Input Number helper to store previous temperature reading.
            Required for dynamic adaptation. Example: input_number.climate_temp_history_living_room
          default: []
          selector:
            entity:
              domain: input_number
        
        helper_trend_direction:
          name: Trend Direction Helper (Optional)
          description: >
            Input Text helper to track temperature trend (rising/falling/stable).
            Required for dynamic adaptation. Example: input_text.climate_trend_direction_living_room
          default: []
          selector:
            entity:
              domain: input_text
        
        helper_mode_start_time:
          name: Mode Start Time Helper (Optional)
          description: >
            Input DateTime helper to track when current mode started.
            Required for dynamic adaptation. Example: input_datetime.climate_mode_start_time_living_room
          default: []
          selector:
            entity:
              domain: input_datetime
        
        helper_effectiveness_score:
          name: Effectiveness Score Helper (Optional)
          description: >
            Input Number helper to track how well current mode is working (0-100%).
            Required for dynamic adaptation. Example: input_number.climate_effectiveness_score_living_room
          default: []
          selector:
            entity:
              domain: input_number
        
        enable_debug_logging:
          name: Enable Debug Logging
          description: >
            Enable detailed warning-level logs for troubleshooting.
            View logs in Settings → System → Logs.
            WARNING: This will create many log entries!
          default: false
          selector:
            boolean:
        
        check_interval_minutes:
          name: Check Interval
          description: >
            How often to check conditions and evaluate temperature (in minutes).
            The automation will run exactly at this interval.
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
              unit_of_measurement: minutes
              mode: slider

    # Notification Settings
    notifications:
      name: "Notification Settings"
      icon: mdi:bell
      collapsed: true
      input:
        enable_notifications:
          name: Enable Notifications
          description: Send notifications about climate changes
          default: true
          selector:
            boolean:
        
        notification_service:
          name: Notification Service
          description: Service to use for notifications
          default: notify.notify
          selector:
            text:
        
        additional_notify_services:
          name: Additional Notification Services
          description: Additional services to notify (e.g., notify.mobile_app_phone)
          default: []
          selector:
            text:
              multiple: true

variables:
  climate_list: !input climate_entities
  persons: !input presence_persons
  devices: !input presence_devices
  eco_enabled: !input enable_eco_mode
  gradual_enabled: !input enable_gradual_adjustment
  away_action: !input away_mode_action
  temp_sensor: !input temperature_sensor
  use_avg: !input use_average_temperature
  helper_mode: !input helper_last_mode
  helper_change: !input helper_last_change
  proximity_sensor_input: !input proximity_sensor
  direction_sensor_input: !input direction_sensor
  
  # Simple temperature inputs
  target_temp: !input target_temperature
  comfort_width: !input comfort_zone_width
  aggressiveness: !input temperature_aggressiveness
  advanced_enabled: !input enable_advanced_temp
  
  # Store advanced inputs if enabled
  comfort_min_input: !input comfort_min_temp
  comfort_max_input: !input comfort_max_temp
  cooling_target_input: !input cooling_target_temp
  heating_target_input: !input heating_target_temp
  cooling_medium_input: !input cooling_medium_temp
  cooling_high_input: !input cooling_high_temp
  heating_medium_input: !input heating_medium_temp
  heating_low_input: !input heating_low_temp
  
  # Calculate or use advanced overrides
  comfort_min_temp: "{{ comfort_min_input if advanced_enabled else (target_temp - comfort_width) | float }}"
  comfort_max_temp: "{{ comfort_max_input if advanced_enabled else (target_temp + comfort_width) | float }}"
  cooling_target_temp: "{{ cooling_target_input if advanced_enabled else target_temp | float }}"
  heating_target_temp: "{{ heating_target_input if advanced_enabled else target_temp | float }}"
  
  # Auto-calculate thresholds based on aggressiveness (smooth graduated response)
  cooling_medium_temp: "{{ cooling_medium_input if advanced_enabled else comfort_max_temp | round(1) }}"
  cooling_high_temp: "{{ cooling_high_input if advanced_enabled else (comfort_max_temp + aggressiveness/2) | round(1) }}"
  heating_medium_temp: "{{ heating_medium_input if advanced_enabled else comfort_min_temp | round(1) }}"
  heating_low_temp: "{{ heating_low_input if advanced_enabled else (comfort_min_temp - aggressiveness/2) | round(1) }}"
  
  enable_pre_conditioning: !input enable_pre_conditioning
  enable_away_mode: !input enable_away_mode
  enable_notifications: !input enable_notifications
  eco_mode_setpoint_offset: !input eco_mode_setpoint_offset
  # Dynamic adaptation settings
  dynamic_enabled: !input enable_dynamic_adaptation
  effectiveness_check_mins: !input effectiveness_check_minutes
  temp_tolerance: !input escalation_temp_tolerance
  deescalation_threshold: !input deescalation_approach_threshold
  helper_temp_history: !input helper_temp_history
  helper_trend: !input helper_trend_direction
  helper_mode_time: !input helper_mode_start_time
  helper_effectiveness: !input helper_effectiveness_score
  last_mode: "{{ states(helper_mode) | default('off') }}"
  last_change: "{{ states(helper_change) | default(now()) }}"
  runtime_min: !input min_runtime_minutes
  offtime_min: !input min_off_time_minutes
  # Smart mode settings
  control_mode_helper: !input helper_control_mode
  presence_detected_helper: !input helper_presence_detected
  proximity_override_helper: !input helper_proximity_override
  presence_timeout: !input presence_timeout_minutes
  home_zone_distance: !input home_zone_distance
  room_sensors: !input room_presence_sensors
  room_ble_name: !input room_name_for_ble
  smart_behavior: !input smart_mode_behavior
  temp_stability_enabled: !input temp_stability_enabled
  stability_tolerance: !input stability_tolerance
  stability_duration: !input stability_duration
  stability_behavior: !input stability_behavior
  extreme_override: !input extreme_temp_override
  extreme_high: !input extreme_high_temp
  extreme_low: !input extreme_low_temp

trigger:
  - platform: state
    entity_id: !input climate_entities
    attribute: current_temperature
    id: temp_change
  
  - platform: state
    entity_id: !input temperature_sensor
    id: external_temp_change
  
  # Single time pattern trigger based on selected interval
  - platform: time_pattern
    minutes: "/1"
    id: periodic_check
  
  - platform: state
    entity_id: !input direction_sensor
    to: "towards"
    id: heading_home
  
  - platform: state
    entity_id: !input direction_sensor
    to: "arrived"
    id: arrived
  
  - platform: state
    entity_id: !input presence_persons
    id: presence_change
  
  - platform: state
    entity_id: !input presence_devices
    id: device_change

condition: []

action:
  # Store inputs as variables first
  - variables:
      check_interval: !input check_interval_minutes
      debug_enabled: !input enable_debug_logging
      proximity_sensor: "{{ proximity_sensor_input if proximity_sensor_input not in [none, '', 'unavailable', 'unknown'] else none }}"
      direction_sensor: "{{ direction_sensor_input if direction_sensor_input not in [none, '', 'unavailable', 'unknown'] else none }}"
      # Dynamic adaptation variables
      previous_temp: >
        {% if helper_temp_history %}
          {{ states(helper_temp_history) | float(0) }}
        {% else %}
          0
        {% endif %}
      current_trend: >
        {% if helper_trend %}
          {{ states(helper_trend) | default('stable') }}
        {% else %}
          stable
        {% endif %}
      mode_start_time: >
        {% if helper_mode_time %}
          {{ states(helper_mode_time) | default(now()) | as_datetime }}
        {% else %}
          {{ now() }}
        {% endif %}
      current_effectiveness: >
        {% if helper_effectiveness %}
          {{ states(helper_effectiveness) | float(50) }}
        {% else %}
          50
        {% endif %}
      should_proceed: >
        {% if trigger.id == 'periodic_check' %}
          {% set mins = now().minute %}
          {% set interval = check_interval | int(1) %}
          {% if interval > 0 %}
            {{ (mins % interval) == 0 }}
          {% else %}
            true
          {% endif %}
        {% else %}
          true
        {% endif %}
  
  # Continue with automation if conditions are met
  - condition: template
    value_template: "{{ should_proceed }}"
  
  # Debug: Log automation trigger
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        🏠 Climate System Activated
        {% if trigger.id == 'temp_change' %}📊 Temperature changed{% elif trigger.id == 'presence_change' %}👤 Someone arrived/left{% elif trigger.id == 'periodic_check' %}⏰ Routine check{% else %}🔄 {{ trigger.id }}{% endif %}
        
        📋 Technical: {{ trigger.platform }}/{{ trigger.entity_id | default('timer') }}/{{ check_interval }}min
      level: warning
      logger: blueprints.climate_control
  
  - variables:
      current_temp: >
        {% if temp_sensor %}
          {{ states(temp_sensor) | float(25) }}
        {% elif use_avg %}
          {% set temps = namespace(values=[]) %}
          {% for entity in climate_list %}
            {% set temps.values = temps.values + [state_attr(entity, 'current_temperature')] %}
          {% endfor %}
          {{ temps.values | average | round(1) }}
        {% else %}
          {{ state_attr(climate_list[0], 'current_temperature') | float(25) }}
        {% endif %}
      
      anyone_home: >
        {% set home = namespace(value=false) %}
        {% for person in persons %}
          {% if is_state(person, 'home') %}
            {% set home.value = true %}
          {% endif %}
        {% endfor %}
        {% if not home.value %}
          {% for device in devices %}
            {% if is_state(device, 'on') or is_state(device, 'PowerOn') %}
              {% set home.value = true %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ home.value }}
      
      approaching_home: >
        {% if direction_sensor and proximity_sensor %}
          {{ is_state(direction_sensor, 'towards') and 
             states(proximity_sensor) | float(10000) < home_zone_distance }}
        {% else %}
          false
        {% endif %}
      
      time_since_change: >
        {{ (as_timestamp(now()) - as_timestamp(states[climate_list[0]].last_changed)) / 60 }}
      
      # Dynamic adaptation calculations
      time_in_current_mode: >
        {% set mode_time_val = states(helper_mode_time) if helper_mode_time else 'unknown' %}
        {% if mode_time_val not in ['unknown', 'unavailable', '', None] %}
          {% set mode_timestamp = as_timestamp(mode_time_val) %}
          {% if mode_timestamp %}
            {{ ((as_timestamp(now()) - mode_timestamp) / 60) | round(1) | abs }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      
      temp_change_rate: >
        {% if previous_temp > 0 and current_temp != previous_temp %}
          {% set interval_num = check_interval | int(1) %}
          {% if interval_num > 0 %}
            {{ ((current_temp - previous_temp) / interval_num) | round(2) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      
      calculated_trend: >
        {% if temp_change_rate > 0.2 %}
          rising
        {% elif temp_change_rate < -0.2 %}
          falling  
        {% else %}
          stable
        {% endif %}
      
      temp_stability_detected: >
        {% if temp_stability_enabled and helper_temp_history %}
          {% set temp_diff = (current_temp - previous_temp) | abs %}
          {% set time_threshold = stability_duration | float %}
          {% if temp_diff <= stability_tolerance and calculated_trend == 'stable' %}
            {% if time_in_current_mode >= time_threshold %}
              {% if last_mode not in ['off', 'stability_off', 'stability_eco', 'unavailable', 'unknown', none] %}
                true
              {% else %}
                false
              {% endif %}
            {% else %}
              false
            {% endif %}
          {% else %}
            false
          {% endif %}
        {% else %}
          false
        {% endif %}
      
      distance_from_target: >
        {% if current_temp > comfort_max_temp %}
          {{ (current_temp - cooling_target_temp) | abs }}
        {% elif current_temp < comfort_min_temp %}
          {{ (current_temp - heating_target_temp) | abs }}
        {% else %}
          0
        {% endif %}
      
      should_escalate: >
        {% if not dynamic_enabled %}
          false
        {% elif time_in_current_mode < effectiveness_check_mins %}
          false
        {% elif last_mode in ['cooling', 'heating'] and calculated_trend == 'rising' and current_temp > comfort_max_temp %}
          true
        {% elif last_mode in ['cooling', 'heating'] and calculated_trend == 'falling' and current_temp < comfort_min_temp %}
          true
        {% elif distance_from_target > temp_tolerance and calculated_trend == 'stable' %}
          true
        {% else %}
          false
        {% endif %}
      
      # Smart mode calculations
      control_mode: >
        {% if control_mode_helper %}
          {{ states(control_mode_helper) | default('Auto') }}
        {% else %}
          Auto
        {% endif %}
      
      room_presence_detected: >
        {% set presence = namespace(value=false) %}
        {% for sensor in room_sensors %}
          {% set sensor_state = states(sensor) | lower %}
          {% if is_state(sensor, 'on') or is_state(sensor, 'detected') or is_state(sensor, 'occupied') %}
            {% set presence.value = true %}
          {% elif room_ble_name and sensor_state == room_ble_name | lower %}
            {% set presence.value = true %}
          {% elif sensor_state in ['home', 'present'] %}
            {% set presence.value = true %}
          {% endif %}
        {% endfor %}
        {{ presence.value }}
      
      last_presence_time: >
        {% if presence_detected_helper and states(presence_detected_helper) not in ['unknown', 'unavailable', ''] %}
          {{ states(presence_detected_helper) | as_datetime }}
        {% else %}
          {{ now() }}
        {% endif %}
      
      minutes_since_presence: >
        {% if room_presence_detected %}
          0
        {% else %}
          {% set presence_time_val = states(presence_detected_helper) if presence_detected_helper else 'unknown' %}
          {% if presence_time_val not in ['unknown', 'unavailable', '', None] %}
            {% set presence_timestamp = as_timestamp(presence_time_val) %}
            {% if presence_timestamp %}
              {{ ((as_timestamp(now()) - presence_timestamp) / 60) | round(0) | abs }}
            {% else %}
              999
            {% endif %}
          {% else %}
            999
          {% endif %}
        {% endif %}
      
      current_distance: >
        {% if proximity_sensor %}
          {{ states(proximity_sensor) | float(99999) }}
        {% else %}
          99999
        {% endif %}
      
      proximity_zone: >
        {% if current_distance < home_zone_distance %}
          home
        {% else %}
          away
        {% endif %}
      
      smart_presence_active: >
        {% if control_mode == 'Manual' %}
          false
        {% elif room_presence_detected %}
          true
        {% elif minutes_since_presence < presence_timeout %}
          true
        {% elif proximity_zone == 'home' %}
          true
        {% elif anyone_home and control_mode == 'Auto' %}
          true
        {% else %}
          false
        {% endif %}
      
      extreme_temp_detected: >
        {% if not extreme_override %}
          false
        {% elif current_temp > extreme_high %}
          hot
        {% elif current_temp < extreme_low %}
          cold
        {% else %}
          false
        {% endif %}
      
      should_activate: >
        {% if control_mode == 'Manual' and extreme_temp_detected and (room_presence_detected or approaching_home) %}
          true
        {% elif control_mode == 'Manual' %}
          false
        {% elif control_mode == 'Smart' %}
          {{ smart_presence_active }}
        {% else %}
          {{ anyone_home or approaching_home }}
        {% endif %}
  
  # Update presence helper if room presence is detected
  - condition: template
    value_template: "{{ room_presence_detected and presence_detected_helper not in [none, '', 'unavailable', 'unknown'] }}"
  - service: input_datetime.set_datetime
    target:
      entity_id: "{{ presence_detected_helper }}"
    data:
      datetime: "{{ now() }}"
  
  - variables:
      should_deescalate: >
        {% if not dynamic_enabled %}
          false
        {% elif distance_from_target <= deescalation_threshold and calculated_trend != 'stable' %}
          {% if current_temp > comfort_max_temp and calculated_trend == 'falling' %}
            true
          {% elif current_temp < comfort_min_temp and calculated_trend == 'rising' %}
            true
          {% else %}
            false
          {% endif %}
        {% else %}
          false
        {% endif %}
  
  # Debug: Log current conditions
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        📊 Climate System Status
        
        🌡️ Temperature: {{ current_temp }}°C {% if calculated_trend == 'rising' %}↗️ Rising{% elif calculated_trend == 'falling' %}↘️ Falling{% else %}➡️ Stable{% endif %}
        🏠 People: {{ 'Someone home' if anyone_home else 'Nobody home' }}{% if approaching_home %} (approaching){% endif %}
        ⚙️ Current Mode: {{ last_mode|title }} (running {{ time_since_change | round(0) }} min)
        🎛️ Control Mode: {{ control_mode }} (from: {{ control_mode_helper if control_mode_helper else 'NO HELPER' }})
        
        {% if temp_stability_enabled and temp_stability_detected and last_mode not in ['stability_off', 'stability_eco'] %}🎯 Status: Temperature stable for {{ time_in_current_mode | round(0) }} min - ready for auto-off{% elif last_mode in ['stability_off', 'stability_eco'] %}💤 Status: AC off due to temperature stability{% elif current_temp < comfort_min_temp %}🥶 Status: Too cold - needs heating{% elif current_temp > comfort_max_temp %}🥵 Status: Too hot - needs cooling{% else %}✅ Status: Perfect temperature{% endif %}
        
        📋 Technical Details:
        • Comfort Zone: {{ comfort_min_temp }}-{{ comfort_max_temp }}°C
        • Cooling Triggers: {{ cooling_medium_temp }}°C (medium), {{ cooling_high_temp }}°C (high)
        • Heating Triggers: {{ heating_medium_temp }}°C (medium), {{ heating_low_temp }}°C (low)
        {% if temp_stability_enabled %}• Stability: {{ 'ACTIVE - AC OFF' if last_mode in ['stability_off', 'stability_eco'] else 'DETECTED' if temp_stability_detected else 'Monitoring' }} (±{{ stability_tolerance }}°C for {{ stability_duration }}min){% endif %}
        • Trend: {{ temp_change_rate }}°C/min, Distance: {{ distance_from_target }}°C, Effectiveness: {{ current_effectiveness }}%
      level: warning
      logger: blueprints.climate_control
  
  # Update temperature history and trend tracking
  - condition: template
    value_template: "{{ dynamic_enabled and helper_temp_history not in [none, '', 'unavailable', 'unknown'] }}"
  - service: input_number.set_value
    target:
      entity_id: "{{ helper_temp_history }}"
    data:
      value: "{{ current_temp }}"
  
  - condition: template
    value_template: "{{ dynamic_enabled and helper_trend not in [none, '', 'unavailable', 'unknown'] }}"  
  - service: input_text.set_value
    target:
      entity_id: "{{ helper_trend }}"
    data:
      value: "{{ calculated_trend }}"

  - choose:
      # Pre-conditioning when approaching
      - conditions:
          - condition: template
            value_template: "{{ enable_pre_conditioning }}"
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ approaching_home }}"
          - condition: template
            value_template: "{{ current_temp > cooling_medium_temp or current_temp < heating_medium_temp }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: Pre-conditioning activated
                Reason: Approaching home
                {% if proximity_sensor %}Distance: {{ states(proximity_sensor) }}m{% endif %}
                Temperature: {{ current_temp }}°C needs adjustment
              level: warning
              logger: blueprints.climate_control
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ target_temp }}"

          - service: system_log.write
            data:
              message: >
                🌡️ TEMP SET: Pre-conditioning
                Set AC to: {{ target_temp | round(0) }}°C (rounded for AC compatibility)
                Actual value: {{ target_temp | round(1) }}°C
                Reason: Pre-conditioning target temperature (approaching home)
                Current: {{ current_temp | round(1) }}°C → Target: {{ target_temp | round(1) }}°C
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_fan_mode
            target:
              entity_id: !input climate_entities
            data:
              fan_mode: >
                {% set available_fans = state_attr(climate_list[0], 'fan_modes') | list %}
                {% set desired_medium_fan = fan_speed_medium %}
                {% if desired_medium_fan in available_fans %}
                  {{ desired_medium_fan }}
                {% elif 'Level 3' in available_fans %}
                  Level 3
                {% elif '3' in available_fans %}
                  3
                {% elif 'medium' in available_fans %}
                  medium
                {% elif 'Auto' in available_fans %}
                  Auto
                {% elif 'auto' in available_fans %}
                  auto
                {% else %}
                  {{ available_fans[-1] if available_fans else 'Auto' }}
                {% endif %}
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Pre-conditioning"
              message: >
                Pre-conditioning started - approaching home.
                Current: {{ current_temp }}°C
      
      # Temperature Stability Auto-Off (Auto/Smart Mode - temperature equilibrium reached)
      - conditions:
          - condition: template
            value_template: "{{ temp_stability_enabled }}"
          - condition: template
            value_template: "{{ control_mode in ['Smart', 'Auto'] }}"
          - condition: template
            value_template: "{{ temp_stability_detected }}"
          - condition: template
            value_template: "{{ last_mode not in ['off', 'stability_off', 'stability_eco', 'unavailable', 'unknown', none] }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🎯 Smart Feature: Temperature Stability Detected
                🌡️ Temperature has been steady at {{ current_temp | round(1) }}°C for {{ time_in_current_mode | round(0) }} minutes
                💡 AC job appears complete - switching to {{ stability_behavior|upper }} mode to save energy
                
                📋 Technical: ±{{ stability_tolerance }}°C tolerance, {{ stability_duration }}min requirement, {{ time_since_change | round(1) }}min since last change
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ stability_behavior == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities

                  - service: system_log.write
                    data:
                      message: >
                        🌡️ TEMP SET: Temperature Stability Auto-Off
                        Set AC to: OFF
                        Actual value: OFF
                        Reason: Temperature equilibrium reached - AC job complete
                        Stable at: {{ current_temp | round(1) }}°C for {{ time_in_current_mode | round(0) }} minutes
                      level: warning
                      logger: blueprints.climate_control
              
              - conditions:
                  - condition: template
                    value_template: "{{ stability_behavior == 'eco' }}"
                sequence:
                  # Set HVAC mode with compatibility check for eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if current_temp > comfort_max_temp %}
                                {% if 'cool' in available_modes %}
                                  cool
                                {% elif 'auto' in available_modes %}
                                  auto
                                {% elif 'heat_cool' in available_modes %}
                                  heat_cool
                                {% else %}
                                  {{ available_modes[0] if available_modes else 'off' }}
                                {% endif %}
                              {% elif current_temp < comfort_min_temp %}
                                {% if 'heat' in available_modes %}
                                  heat
                                {% elif 'auto' in available_modes %}
                                  auto
                                {% elif 'heat_cool' in available_modes %}
                                  heat_cool
                                {% else %}
                                  {{ available_modes[0] if available_modes else 'off' }}
                                {% endif %}
                              {% else %}
                                {% if 'auto' in available_modes %}
                                  auto
                                {% elif 'heat_cool' in available_modes %}
                                  heat_cool
                                {% else %}
                                  {{ available_modes[0] if available_modes else 'off' }}
                                {% endif %}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ comfort_max_temp + 1 }}
                        {% elif current_temp < comfort_min_temp %}
                          {{ comfort_min_temp - 1 }}
                        {% else %}
                          {{ target_temp }}
                        {% endif %}

                  - service: system_log.write
                    data:
                      message: >
                        🌡️ TEMP SET: Temperature Stability Eco Mode
                        Set AC to: {{ ((comfort_max_temp + 1) if current_temp > comfort_max_temp else (comfort_min_temp - 1) if current_temp < comfort_min_temp else target_temp) | round(0) }}°C (rounded for AC compatibility)
                        Actual value: {{ ((comfort_max_temp + 1) if current_temp > comfort_max_temp else (comfort_min_temp - 1) if current_temp < comfort_min_temp else target_temp) | round(1) }}°C
                        Reason: Temperature stability eco mode (gentle maintenance after equilibrium)
                        Current: {{ current_temp | round(1) }}°C → Stable for {{ time_in_current_mode | round(0) }} minutes
                      level: warning
                      logger: blueprints.climate_control
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "stability_{{ stability_behavior }}"
          
          - condition: template
            value_template: "{{ notification_service is defined and notification_service not in [none, ''] }}"
          - service: "{{ notification_service }}"
            data:
              title: "Climate Control"
              message: "Temperature Stability: {{ stability_behavior }} (stable {{ time_in_current_mode | round(0) }}min, {{ current_temp }}°C)"

      # Manual Mode - Immediately clear automation states when detected
      - conditions:
          - condition: template
            value_template: "{{ control_mode == 'Manual' }}"
          - condition: template
            value_template: "{{ last_mode in ['stability_off', 'stability_eco', 'smart_off', 'smart_eco', 'smart_maintain'] }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🎮 Manual Mode: IMMEDIATE Control Restored
                🔄 Clearing "{{ last_mode }}" state instantly
                💡 You now have full manual control - no automation interference
                
                📋 Technical: Manual mode = instant automation disable
              level: warning
              logger: blueprints.climate_control

          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "manual"

      # Smart Mode room absence (room empty but still home)
      - conditions:
          - condition: template
            value_template: "{{ control_mode == 'Smart' }}"
          - condition: template
            value_template: "{{ not room_presence_detected }}"
          - condition: template
            value_template: "{{ minutes_since_presence >= presence_timeout }}"
          - condition: template
            value_template: "{{ proximity_zone == 'home' or anyone_home }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🚪 Smart Mode: Room Empty
                💡 Nobody detected in room for {{ minutes_since_presence | round(0) }} minutes
                🏠 You're still home, so switching to {{ smart_behavior|upper }} mode to save energy
                
                📋 Technical: {{ time_since_change | round(1) }}min since last change
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ smart_behavior == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities
              
              - conditions:
                  - condition: template
                    value_template: "{{ smart_behavior == 'eco' }}"
                sequence:
                  # Set HVAC mode with auto preference and fallback for room eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                                cool
                              {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                                heat
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ comfort_max_temp + eco_offset }}
                        {% elif current_temp < comfort_min_temp %}
                          {{ comfort_min_temp - eco_offset }}
                        {% else %}
                          {{ target_temp }}
                        {% endif %}

                  - service: system_log.write
                    data:
                      message: >
                        🌡️ TEMP SET: Smart Room Eco Mode
                        Set AC to: {{ ((comfort_max_temp + eco_offset) if current_temp > comfort_max_temp else (comfort_min_temp - eco_offset) if current_temp < comfort_min_temp else target_temp) | round(0) }}°C (rounded for AC compatibility)
                        Actual value: {{ ((comfort_max_temp + eco_offset) if current_temp > comfort_max_temp else (comfort_min_temp - eco_offset) if current_temp < comfort_min_temp else target_temp) | round(1) }}°C
                        Reason: {{ 'Eco cooling (comfort max +' + eco_offset|string + '°C)' if current_temp > comfort_max_temp else 'Eco heating (comfort min -' + eco_offset|string + '°C)' if current_temp < comfort_min_temp else 'Direct target (within comfort zone)' }}
                        Current: {{ current_temp | round(1) }}°C → Comfort range: {{ comfort_min_temp | round(1) }}-{{ comfort_max_temp | round(1) }}°C
                      level: warning
                      logger: blueprints.climate_control
              
              - conditions:
                  - condition: template
                    value_template: "{{ smart_behavior == 'maintain' }}"
                sequence:
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: "{{ target_temp }}"

                  - service: system_log.write
                    data:
                      message: >
                        🌡️ TEMP SET: Smart Room Maintain
                        Set AC to: {{ target_temp | round(0) }}°C (rounded for AC compatibility)
                        Actual value: {{ target_temp | round(1) }}°C
                        Reason: Smart mode maintain current temperature (room empty but still home)
                        Current: {{ current_temp | round(1) }}°C → Target: {{ target_temp | round(1) }}°C
                      level: warning
                      logger: blueprints.climate_control
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "smart_{{ smart_behavior }}"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "Smart Mode: {{ smart_behavior }} (room empty {{ minutes_since_presence | round(0) }}min, {{ current_temp }}°C)"

      # Away mode (Global - nobody home)
      - conditions:
          - condition: template
            value_template: "{{ enable_away_mode }}"
          - condition: template
            value_template: "{{ not should_activate }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: Away mode activated
                Action: {{ away_action }}
                Nobody home detected
                Time since last change: {{ time_since_change | round(1) }} min
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ away_action == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities
              
              - conditions:
                  - condition: template
                    value_template: "{{ away_action == 'eco' }}"
                sequence:
                  # Set HVAC mode with auto preference and fallback for away eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                                cool
                              {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                                heat
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ cooling_target_temp + eco_mode_setpoint_offset }}
                        {% else %}
                          {{ heating_target_temp - eco_mode_setpoint_offset }}
                        {% endif %}

                  - service: system_log.write
                    data:
                      message: >
                        🌡️ TEMP SET: Away Eco Mode
                        Set AC to: {{ ((cooling_target_temp + eco_mode_setpoint_offset) if current_temp > comfort_max_temp else (heating_target_temp - eco_mode_setpoint_offset)) | round(0) }}°C (rounded for AC compatibility)
                        Actual value: {{ ((cooling_target_temp + eco_mode_setpoint_offset) if current_temp > comfort_max_temp else (heating_target_temp - eco_mode_setpoint_offset)) | round(1) }}°C
                        Reason: {{ 'Eco cooling (target +' + eco_mode_setpoint_offset|string + '°C offset)' if current_temp > comfort_max_temp else 'Eco heating (target -' + eco_mode_setpoint_offset|string + '°C offset)' }}
                        Current: {{ current_temp | round(1) }}°C → Comfort range: {{ comfort_min_temp | round(1) }}-{{ comfort_max_temp | round(1) }}°C
                      level: warning
                      logger: blueprints.climate_control
                  
                  # Set auto fan mode for efficient away eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                        - service: climate.set_fan_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            fan_mode: >
                              {% if 'Auto' in available_fans %}
                                Auto
                              {% elif 'auto' in available_fans %}
                                auto
                              {% elif 'low' in available_fans %}
                                low
                              {% elif 'Quiet' in available_fans %}
                                Quiet
                              {% elif 'Silence' in available_fans %}
                                Silence
                              {% elif 'Level 1' in available_fans %}
                                Level 1
                              {% elif '1' in available_fans %}
                                1
                              {% else %}
                                {{ available_fans[0] if available_fans else 'Auto' }}
                              {% endif %}
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Away Mode"
              message: "{{ away_action | title }} mode activated - nobody home"
      
      # High cooling mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp >= cooling_high_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'cooling' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: HIGH COOLING MODE
                Temperature: {{ current_temp }}°C > {{ cooling_high_temp }}°C
                Target: {{ cooling_target_temp }}°C
                Fan: Maximum
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode with auto preference and fallback
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'cool' in available_modes %}
                        cool
                      {% elif 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if gradual_enabled %}
                  {{ [cooling_target_temp, current_temp - 2] | min }}
                {% else %}
                  {{ cooling_target_temp }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                🌡️ TEMP SET: High Cooling
                Set AC to: {{ ([cooling_target_temp, current_temp - 2] | min if gradual_enabled else cooling_target_temp) | round(0) }}°C (rounded for AC compatibility)
                Actual value: {{ ([cooling_target_temp, current_temp - 2] | min if gradual_enabled else cooling_target_temp) | round(1) }}°C
                Reason: {{ 'Gradual adjustment (target ' + cooling_target_temp|string + '°C, current-2°C = ' + (current_temp-2)|round(1)|string + '°C, chose minimum)' if gradual_enabled else 'Direct target temperature' }}
                Current: {{ current_temp | round(1) }}°C → Target: {{ cooling_target_temp | round(1) }}°C
              level: warning
              logger: blueprints.climate_control
          
          # Set fan mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "cooling"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "High cooling mode - {{ current_temp }}°C"
      
      # Medium cooling mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp >= cooling_medium_temp and current_temp < cooling_high_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'cooling' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: MEDIUM COOLING MODE
                Temperature: {{ current_temp }}°C ({{ cooling_medium_temp }}-{{ cooling_high_temp }}°C range)
                Target: {{ cooling_target_temp }}°C
                Fan: Auto/Medium (efficient)
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode to auto for efficient medium cooling
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% elif 'cool' in available_modes %}
                        cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if gradual_enabled %}
                  {{ [cooling_target_temp, current_temp - 1] | min }}
                {% else %}
                  {{ cooling_target_temp }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                🌡️ TEMP SET: Medium Cooling
                Set AC to: {{ ([cooling_target_temp, current_temp - 1] | min if gradual_enabled else cooling_target_temp) | round(0) }}°C (rounded for AC compatibility)
                Actual value: {{ ([cooling_target_temp, current_temp - 1] | min if gradual_enabled else cooling_target_temp) | round(1) }}°C
                Reason: {{ 'Gradual adjustment (target ' + cooling_target_temp|string + '°C, current-1°C = ' + (current_temp-1)|round(1)|string + '°C, chose minimum)' if gradual_enabled else 'Direct target temperature' }}
                Current: {{ current_temp | round(1) }}°C → Target: {{ cooling_target_temp | round(1) }}°C
              level: warning
              logger: blueprints.climate_control
          
          # Set auto/medium fan mode for efficient cooling
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% elif 'medium' in available_fans %}
                        medium
                      {% elif 'Level 3' in available_fans %}
                        Level 3
                      {% elif '3' in available_fans %}
                        3
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "cooling"
      
      # Low heating mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp <= heating_low_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'heating' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: HIGH HEATING MODE
                Temperature: {{ current_temp }}°C < {{ heating_low_temp }}°C
                Target: {{ heating_target_temp }}°C
                Fan: Maximum
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ heating_target_temp }}"

          - service: system_log.write
            data:
              message: >
                🌡️ TEMP SET: High Heating
                Set AC to: {{ heating_target_temp | round(0) }}°C (rounded for AC compatibility)
                Actual value: {{ heating_target_temp | round(1) }}°C
                Reason: Direct target temperature (no gradual adjustment for heating)
                Current: {{ current_temp | round(1) }}°C → Target: {{ heating_target_temp | round(1) }}°C
              level: warning
              logger: blueprints.climate_control
          
          # Set max fan mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "heating"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "High heating mode - {{ current_temp }}°C"
      
      # Medium heating mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp <= heating_medium_temp and current_temp > heating_low_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'heating' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: MEDIUM HEATING MODE
                Temperature: {{ current_temp }}°C ({{ heating_low_temp }}-{{ heating_medium_temp }}°C range)
                Target: {{ heating_target_temp }}°C
                Fan: Auto/Medium (efficient)
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode to auto for efficient medium heating
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% elif 'heat' in available_modes %}
                        heat
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ heating_target_temp }}"

          - service: system_log.write
            data:
              message: >
                🌡️ TEMP SET: Medium Heating
                Set AC to: {{ heating_target_temp | round(0) }}°C (rounded for AC compatibility)
                Actual value: {{ heating_target_temp | round(1) }}°C
                Reason: Direct target temperature (no gradual adjustment for heating)
                Current: {{ current_temp | round(1) }}°C → Target: {{ heating_target_temp | round(1) }}°C
              level: warning
              logger: blueprints.climate_control
          
          # Set auto/medium fan mode for efficient heating
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% elif 'medium' in available_fans %}
                        medium
                      {% elif 'Level 3' in available_fans %}
                        Level 3
                      {% elif '3' in available_fans %}
                        3
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "heating"
      
      # Comfort zone - Eco mode or OFF mode (Power Saving)
      # When temperature is within acceptable range (e.g., 21-25°C with ±2°C tolerance)
      # OFF mode saves 40-60% more energy vs eco mode but allows temperature drift
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp >= comfort_min_temp and current_temp <= comfort_max_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ eco_enabled }}"
                sequence:
                  # Eco mode - maintain with reduced fan and wider setpoint (uses ~150-250W)
                  # Set HVAC mode to auto for maximum efficiency in comfort zone
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: "{{ target_temp }}"

                  - service: system_log.write
                    data:
                      message: >
                        🌡️ TEMP SET: Comfort Zone Maintenance
                        Set AC to: {{ target_temp | round(0) }}°C (rounded for AC compatibility)
                        Actual value: {{ target_temp | round(1) }}°C
                        Reason: Maintaining target temperature within comfort zone
                        Current: {{ current_temp | round(1) }}°C → Target: {{ target_temp | round(1) }}°C
                      level: warning
                      logger: blueprints.climate_control
                  
                  # Set auto fan mode for maximum efficiency in comfort zone
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                        - service: climate.set_fan_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            fan_mode: >
                              {% if 'Auto' in available_fans %}
                                Auto
                              {% elif 'auto' in available_fans %}
                                auto
                              {% elif 'low' in available_fans %}
                                low
                              {% elif 'Quiet' in available_fans %}
                                Quiet
                              {% elif 'Silence' in available_fans %}
                                Silence
                              {% elif 'Level 1' in available_fans %}
                                Level 1
                              {% elif '1' in available_fans %}
                                1
                              {% else %}
                                {{ available_fans[0] if available_fans else 'Auto' }}
                              {% endif %}
                  
                  # Set swing mode with compatibility check for eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                            desired_swing: !input swing_mode_active
                        - service: climate.set_swing_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            swing_mode: >
                              {% if desired_swing in available_swings %}
                                {{ desired_swing }}
                              {% elif desired_swing == 'both' and '3D' in available_swings %}
                                3D
                              {% elif desired_swing == 'both' and 'Both' in available_swings %}
                                Both
                              {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                                Vertical
                              {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                                vertical
                              {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                                Horizontal
                              {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                                horizontal
                              {% elif 'both' in available_swings %}
                                both
                              {% elif 'Both' in available_swings %}
                                Both
                              {% elif '3D' in available_swings %}
                                3D
                              {% elif 'Vertical' in available_swings %}
                                Vertical
                              {% elif 'vertical' in available_swings %}
                                vertical
                              {% else %}
                                {{ available_swings[0] if available_swings else 'Off' }}
                              {% endif %}
                  
                  - service: input_text.set_value
                    target:
                      entity_id: !input helper_last_mode
                    data:
                      value: "eco"
                  
                  - condition: template
                    value_template: "{{ enable_notifications }}"
                  
                  - service: !input notification_service
                    data:
                      title: "Climate Control"
                      message: "Eco mode - Comfort zone ({{ current_temp }}°C)"
            
            default:
              # OFF mode - Maximum power savings (0W consumption)
              # A/C turns completely off when temperature is acceptable
              # Will restart when temp exits comfort zone (e.g., <21°C or >25°C)
              - service: climate.turn_off
                target:
                  entity_id: !input climate_entities
              
              - service: input_text.set_value
                target:
                  entity_id: !input helper_last_mode
                data:
                  value: "off"
              
              - condition: template
                value_template: "{{ enable_notifications }}"
              
              - service: !input notification_service
                data:
                  title: "Climate Control"
                  message: "Turned off - Comfort zone ({{ current_temp }}°C)"

      # FALLBACK: Dynamic Escalation - Only if no normal modes triggered
      - conditions:
          - condition: template
            value_template: "{{ should_escalate }}"
          - condition: template
            value_template: "{{ should_activate }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔥 CLIMATE DEBUG: DYNAMIC ESCALATION ACTIVATED (FALLBACK)
                Reason: {{ 'Temperature rising when cooling' if calculated_trend == 'rising' and current_temp > comfort_max_temp else 
                          'Temperature falling when heating' if calculated_trend == 'falling' and current_temp < comfort_min_temp else
                          'Temperature stalled for ' ~ time_in_current_mode ~ ' minutes' }}
                No normal modes triggered, escalating to maximum power
              level: warning
              logger: blueprints.climate_control
          
          # Force maximum cooling/heating mode
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if current_temp > comfort_max_temp and 'cool' in available_modes %}
                        cool
                      {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                        heat
                      {% elif 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if current_temp > comfort_max_temp %}
                  {{ cooling_target_temp }}
                {% elif current_temp < comfort_min_temp %}
                  {{ heating_target_temp }}
                {% else %}
                  {{ target_temp }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                🌡️ TEMP SET: Emergency Escalation
                Set AC to: {{ (cooling_target_temp if current_temp > comfort_max_temp else heating_target_temp if current_temp < comfort_min_temp else target_temp) | round(0) }}°C (rounded for AC compatibility)
                Actual value: {{ (cooling_target_temp if current_temp > comfort_max_temp else heating_target_temp if current_temp < comfort_min_temp else target_temp) | round(1) }}°C
                Reason: {{ 'Emergency cooling (trend ineffective)' if current_temp > comfort_max_temp else 'Emergency heating (trend ineffective)' if current_temp < comfort_min_temp else 'Emergency target (stalled temperature)' }}
                Current: {{ current_temp | round(1) }}°C → Target: {{ (cooling_target_temp if current_temp > comfort_max_temp else heating_target_temp if current_temp < comfort_min_temp else target_temp) | round(1) }}°C
              level: warning
              logger: blueprints.climate_control
          
          # Set maximum fan speed for escalation
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: >
                {% if current_temp > comfort_max_temp %}
                  cooling_escalated
                {% else %}
                  heating_escalated  
                {% endif %}

  # Debug: No conditions matched
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        ✅ Climate System: All Good
        {% if current_temp >= comfort_min_temp and current_temp <= comfort_max_temp %}🎯 Temperature {{ current_temp }}°C is perfect - no changes needed{% else %}⏸️ No action required right now{% endif %}
        
        📋 Technical: {{ current_temp }}°C, {{ 'someone home' if anyone_home else 'nobody home' }}, {{ last_mode }} mode
      level: warning
      logger: blueprints.climate_control

mode: restart