blueprint:
  name: Ultimate Smart Climate Control - v2.3.1

  description: |
    **Ultimate Smart Climate Control v2.3.1**

    üå°Ô∏è **INTELLIGENT CLIMATE CONTROL**

    Advanced power-efficient climate automation with **proximity-based pre-conditioning** and **intelligent presence detection**. Control multiple A/C units with full customization of temperatures, distances, and operating modes.

    **POWER SAVING FEATURES:**

    ‚Ä¢ **Energy Optimization:** Configured to turn OFF in comfort zone (saves 40-60% energy)
    ‚Ä¢ **Smart Tolerance:** Wider temperature tolerance (¬±2¬∞C) with extended cycling protection
    ‚Ä¢ **Eco Mode:** Reduces energy use by 30-40% vs traditional on/off cycling

    **UNIVERSAL COMPATIBILITY:**

    **Auto-detects and adapts** to different A/C models:

    ‚Ä¢ **HVAC modes:** auto ‚Üî heat_cool, supports all Daikin variants
    ‚Ä¢ **Fan speeds:** Level 5 ‚Üî 5, Auto ‚Üî auto, Quiet ‚Üî Silence
    ‚Ä¢ **Swing modes:** Both ‚Üî both, Vertical ‚Üî vertical, 3D ‚Üî both

    **SMART MODE PRESENCE:**

    **Room-specific climate control** based on occupancy:

    ‚Ä¢ **Room occupied:** Normal temperature control
    ‚Ä¢ **Room empty (timeout):** Configurable eco/off/maintain behavior
    ‚Ä¢ **Away from house:** Global away mode (separate setting)

    **VERSION UPDATES:**

    **v2.3 Features:**
    ‚Ä¢ **Manual Override Protection** - Respects user manual changes for configurable time
    ‚Ä¢ **Enhanced stability** and improved logic flow

    **v2.2 Features:**
    ‚Ä¢ **Adaptive Control Mode** - Auto-switch modes based on room occupancy (optional)

    **v2.1 Features:**
    ‚Ä¢ **Time-Based Scheduling** - Different temperatures for different times (optional)
    ‚Ä¢ **Window Detection** - Auto-off when windows open (optional)
    ‚Ä¢ **Weather Compensation** - Adjust based on outdoor temperature (optional)
    ‚Ä¢ **Hysteresis Logic** - Prevents rapid on/off cycling

    **CONTROL MODES:**

    ‚Ä¢ **AUTO MODE:**
      Full automation with occupancy detection and presence-based control.
      System automatically adjusts temperature when you're home or away.

    ‚Ä¢ **MANUAL MODE:**
      Full manual control with no automation.
      You control temperature, fan speed, and on/off manually.

    ‚Ä¢ **SMART MODE:**
      Aggressive presence detection and advanced occupancy sensing.
      Uses motion sensors, door sensors, phone presence, and predictive algorithms
      to optimize temperature before occupancy and maintain comfort during use.
      
      **NEW:** Temperature Stability Auto-Off - automatically turns off AC when
      temperature equilibrium is reached (configurable tolerance & duration).

    **KEY FEATURES:**

    ‚Ä¢ **Smart Mode Control** - Auto/Manual/Smart modes with presence timeout
    ‚Ä¢ **Room-Specific Presence** - BLE/PIR sensors for accurate occupancy
    ‚Ä¢ **Proximity Zones** - Different behaviors based on distance from home
    ‚Ä¢ **Eco Mode** - Reduces energy use by 30-40% vs on/off cycling
    ‚Ä¢ **Smart Pre-conditioning** - Activates when approaching home
    ‚Ä¢ **Multi-Zone Support** - Control 1 or many A/C units
    ‚Ä¢ **Gradual Adjustments** - Prevents aggressive cycling
    ‚Ä¢ **Runtime Protection** - Extends equipment life

    **REQUIRED SETUP** - Create unique helpers for EACH room/automation:

    **1. Input Text Helper** (unique per room):
    ‚Ä¢ Living Room: `input_text.climate_last_mode_living_room`
    ‚Ä¢ Bedroom: `input_text.climate_last_mode_bedroom`
    ‚Ä¢ Office: `input_text.climate_last_mode_office`
    ‚Ä¢ Icon: `mdi:air-conditioner`

    **2. Input DateTime Helper** (unique per room):
    ‚Ä¢ Living Room: `input_datetime.climate_last_change_living_room`
    ‚Ä¢ Bedroom: `input_datetime.climate_last_change_bedroom`
    ‚Ä¢ Office: `input_datetime.climate_last_change_office`
    ‚Ä¢ Has date: **Yes** ‚úÖ
    ‚Ä¢ Has time: **Yes** ‚úÖ
    ‚Ä¢ Icon: `mdi:clock-outline`

    **OPTIONAL: SMART MODE HELPERS** (for advanced control):
    ‚Ä¢ `input_select.climate_control_mode_[room]` (Auto/Manual/Smart modes)
    ‚Ä¢ `input_datetime.presence_last_detected_[room]` (presence timeout tracking)
    ‚Ä¢ `input_boolean.climate_proximity_override_[room]` (emergency override)

    **OPTIONAL: DYNAMIC ADAPTATION HELPERS** (for smart escalation):
    ‚Ä¢ `input_number.climate_temp_history_[room]` (temperature tracking)
    ‚Ä¢ `input_text.climate_trend_direction_[room]` (rising/falling/stable)
    ‚Ä¢ `input_datetime.climate_mode_start_time_[room]` (when current mode started)
    ‚Ä¢ `input_number.climate_effectiveness_score_[room]` (0-100, how well it's working)

    **OPTIONAL: STABILITY & HYSTERESIS HELPERS** (for v2.1+ features):
    ‚Ä¢ `input_datetime.temp_stable_since_[room]` (tracks when temp became stable)
    ‚Ä¢ `input_text.climate_last_transition_[room]` (for hysteresis tracking)
    
    
    üìç Create via: Settings ‚Üí Devices & Services ‚Üí Helpers ‚Üí Create Helper
    
    
    3Ô∏è‚É£ PROXIMITY SENSORS - Set up via Integration:
    
    1. Go to Settings ‚Üí Devices & Services ‚Üí Integrations
    2. Click "+ ADD INTEGRATION" 
    3. Search for and select "Proximity"
    4. Configure:
       ‚Ä¢ Name: "Home"
       ‚Ä¢ Zone: Select your "Home" zone
       ‚Ä¢ Devices: Select your person entities
       ‚Ä¢ Tolerance: 50m (prevents GPS jitter updates)
    
    This creates:
    ‚Ä¢ sensor.home_nearest_distance (distance in meters)
    ‚Ä¢ sensor.home_nearest_direction_of_travel (towards/away/stationary/arrived)
    
    
    **OPTIONAL: Energy Tracking Helpers:**
    
    ‚Ä¢ `input_number.climate_power_saving_score` (efficiency %)
    ‚Ä¢ `sensor.climate_runtime_today` (daily runtime tracking)
    ‚Ä¢ `sensor.climate_efficiency_rating` (efficiency score)
  domain: automation
  source_url: https://github.com/yourusername/ultimate-climate-control
  input:
    # Basic required settings (always visible)
    climate_entities:
      name: Climate Entities *
      description: |
        Select one or more **climate entities** to control with this automation.

        **Supported devices:** All types of A/C units, heat pumps, and climate control devices.
      selector:
        entity:
          multiple: true
          domain: climate
    
    helper_last_mode:
      name: Last Mode Helper Entity *
      description: |
        Input Text helper to track the **last active climate mode**.

        **Create a unique helper for each room/automation instance:**

        ‚Ä¢ `input_text.climate_last_mode_living_room`
        ‚Ä¢ `input_text.climate_last_mode_bedroom`
        ‚Ä¢ `input_text.climate_last_mode_office`

        **Important:** This helper stores state information for proper automation behavior.
      selector:
        entity:
          domain: input_text
    
    helper_last_change:
      name: Last Change Helper Entity *
      description: |
        Input DateTime helper to track **when climate changes occurred**.

        **Create a unique helper for each room/automation instance:**

        ‚Ä¢ `input_datetime.climate_last_change_living_room`
        ‚Ä¢ `input_datetime.climate_last_change_bedroom`
        ‚Ä¢ `input_datetime.climate_last_change_office`

        **Used for:** Timing calculations and manual override protection.
      selector:
        entity:
          domain: input_datetime

    # Temperature Settings - Simple Mode
    temperature_settings:
      name: "Temperature Settings"
      icon: mdi:thermometer
      collapsed: false
      input:
        temperature_sensor:
          name: Temperature Sensor (Optional)
          description: |
            External temperature sensor for **more accurate room temperature readings**.

            If not configured, the system will use your A/C unit's built-in sensor.

            **Best practices for external sensors:**

            ‚Ä¢ Place at seated height (1-1.5m from floor)
            ‚Ä¢ Position away from direct sunlight and heat sources
            ‚Ä¢ Central location in the room for representative readings
            ‚Ä¢ Avoid drafty areas or corners

            **Benefit:** External sensors provide significantly better temperature control accuracy.
          default: []
          selector:
            entity:
              domain: sensor
              device_class: temperature
        
        use_average_temperature:
          name: Use Average Temperature
          description: |
            Controls how temperature is calculated when using **multiple A/C units**.

            ‚Ä¢ **ON:** Average temperatures from all A/C units
            ‚Ä¢ **OFF:** Use temperature from the first A/C unit only

            **Important:** Turn OFF when using a single external sensor for all units to avoid conflicts.
          default: true
          selector:
            boolean:
        
        # SIMPLE CONTROLS (Always visible)
        target_temperature:
          name: üéØ Target Temperature
          description: |
            Your **ideal room temperature** in degrees Celsius.

            This is the **main temperature control** that affects all other zones proportionally.

            Adjusting this value will shift all temperature thresholds up or down together.

            **Auto mode target:** This is where the system will maintain temperature.
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
              mode: slider
        
        comfort_zone_width:
          name: üìè Comfort Zone Range
          description: |
            Temperature variation tolerance around target **(¬±¬∞C)**:

            ‚Ä¢ **Wider** = more tolerance, less switching, more efficient
            ‚Ä¢ **Narrower** = tighter control, more activity, less efficient

            **Example:** Target 23¬∞C with ¬±2¬∞C = comfort zone 21-25¬∞C (saves 40-60% power)
          default: 2
          selector:
            number:
              min: 0.5
              max: 3
              step: 0.5
              unit_of_measurement: "¬∞C"
              mode: slider
        
        temperature_aggressiveness:
          name: ‚ö° Response Aggressiveness
          description: |
            How quickly system responds **beyond comfort zone**:

            ‚Ä¢ **1 = Gentle** (extreme modes at ¬±3¬∞C from comfort, slow, very efficient)
            ‚Ä¢ **2 = Smooth** (medium at comfort edge, high at +1¬∞C, max at +2¬∞C)
            ‚Ä¢ **3 = Balanced** (extreme modes at ¬±2¬∞C from comfort, good balance)
            ‚Ä¢ **5 = Aggressive** (extreme modes at ¬±1¬∞C from comfort, fast, less efficient)

            **Example** (Target 23¬∞C, Zone ¬±2¬∞C, Aggressiveness 2):

            ‚Ä¢ **Comfort:** 21-25¬∞C (OFF mode for power savings)
            ‚Ä¢ **Medium:** 25¬∞C & 21¬∞C (gentle response at comfort edge)
            ‚Ä¢ **High:** 26¬∞C & 20¬∞C (strong response at ¬±1¬∞C from edge)
          default: 2
          selector:
            number:
              min: 1
              max: 5
              step: 1
              mode: slider
        
        # ADVANCED OVERRIDES (Hidden by default)
        enable_advanced_temp:
          name: üîß Enable Advanced Temperature Controls
          description: |
            Manually override **individual temperature thresholds**.

            ‚Ä¢ For users who want **precise control** over all thresholds
            ‚Ä¢ Overrides automatic calculations based on target temperature
            ‚Ä¢ Allows fine-tuning of comfort zones and trigger points

            **Recommendation:** Most users should leave this disabled and use the base target temperature.
          default: false
          selector:
            boolean:
        
        # These are only shown when advanced mode is enabled
        comfort_min_temp:
          name: Comfort Zone Minimum (Advanced)
          description: |
            Override auto-calculated **minimum comfort temperature**.

            ‚Ä¢ **Bottom of comfort zone** where heating may start
            ‚Ä¢ Should be lower than comfort maximum
            ‚Ä¢ Typically 1-2¬∞C below target temperature

            **Behavior:** When room is above this, system stays in eco/off mode.
          default: 21
          selector:
            number:
              min: 18
              max: 25
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        comfort_max_temp:
          name: Comfort Zone Maximum (Advanced)
          description: |
            Override auto-calculated **maximum comfort temperature**.

            ‚Ä¢ **Top of comfort zone** where cooling may start
            ‚Ä¢ Should be higher than comfort minimum
            ‚Ä¢ Typically 1-2¬∞C above target temperature

            **Behavior:** When room is below this, system stays in eco/off mode.
          default: 23
          selector:
            number:
              min: 20
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        cooling_target_temp:
          name: Cooling Target (Advanced)
          description: |
            Override **cooling target temperature**.

            ‚Ä¢ **What temperature to cool the room to**
            ‚Ä¢ Used when room exceeds comfort maximum
            ‚Ä¢ Usually same as or slightly below base target

            **Behavior:** System will cool to this temperature then switch to eco/off.
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        heating_target_temp:
          name: Heating Target (Advanced)
          description: |
            Override **heating target temperature**.

            ‚Ä¢ **What temperature to heat the room to**
            ‚Ä¢ Used when room falls below comfort minimum
            ‚Ä¢ Usually same as or slightly above base target

            **Behavior:** System will heat to this temperature then switch to eco/off.
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        precool_target_temp:
          name: Pre-cooling Target (Advanced)
          description: |
            Override **pre-conditioning target temperature**.

            ‚Ä¢ **Temperature to achieve before you arrive home**
            ‚Ä¢ Used with proximity sensors and approaching detection
            ‚Ä¢ Should be comfortable for immediate occupancy

            **Recommendation:** Usually matches your preferred target temperature.
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        cooling_high_temp:
          name: High Cooling Threshold (Advanced)
          description: |
            Override **maximum cooling trigger temperature**.

            ‚Ä¢ **Temperature that triggers high-power cooling mode**
            ‚Ä¢ When room exceeds this, system uses maximum fan speed
            ‚Ä¢ Should be significantly higher than comfort maximum

            **Purpose:** For emergency cooling when room gets very hot.
          default: 26
          selector:
            number:
              min: 20
              max: 35
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        cooling_medium_temp:
          name: Medium Cooling Threshold (Advanced)
          description: |
            Override **medium cooling trigger temperature**.

            ‚Ä¢ **Temperature that triggers medium-power cooling mode**
            ‚Ä¢ When room exceeds this, system uses moderate fan speed
            ‚Ä¢ Should be between comfort max and high cooling trigger

            **Purpose:** Balanced cooling for moderately warm conditions.
          default: 24
          selector:
            number:
              min: 20
              max: 35
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        heating_low_temp:
          name: Low Heating Threshold (Advanced)
          description: |
            Override **maximum heating trigger temperature**.

            ‚Ä¢ **Temperature that triggers high-power heating mode**
            ‚Ä¢ When room falls below this, system uses maximum fan speed
            ‚Ä¢ Should be significantly lower than comfort minimum

            **Purpose:** For emergency heating when room gets very cold.
          default: 18
          selector:
            number:
              min: 10
              max: 25
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        heating_medium_temp:
          name: Medium Heating Threshold (Advanced)
          description: |
            Override **medium heating trigger temperature**.

            ‚Ä¢ **Temperature that triggers medium-power heating mode**
            ‚Ä¢ When room falls below this, system uses moderate fan speed
            ‚Ä¢ Should be between comfort min and low heating trigger

            **Purpose:** Balanced heating for moderately cool conditions.
          default: 20
          selector:
            number:
              min: 10
              max: 25
              step: 0.5
              unit_of_measurement: "¬∞C"

    # Presence & Proximity Settings
    presence_settings:
      name: "Presence & Proximity"
      icon: mdi:account-multiple
      collapsed: true
      input:
        presence_persons:
          name: People to Track
          description: |
            Select people for **presence detection**.

            ‚Ä¢ **Used for away mode detection**
            ‚Ä¢ Triggers pre-conditioning when approaching home
            ‚Ä¢ Works with proximity/direction sensors for advanced features
          default: []
          selector:
            entity:
              multiple: true
              domain: person
        
        presence_devices:
          name: Presence Detection Devices
          description: |
            Additional devices indicating presence when **person entities aren't sufficient**.

            **Examples:**

            ‚Ä¢ PC power state sensors
            ‚Ä¢ Smart TV power sensors
            ‚Ä¢ Gaming console entities
            ‚Ä¢ Workstation activity sensors

            **Purpose:** These supplement person presence detection for more accurate home/away detection.
          default: []
          selector:
            entity:
              multiple: true
        
        proximity_sensor:
          name: Proximity Distance Sensor
          description: |
            Sensor tracking **nearest person's distance from home**.

            ‚Ä¢ **Used for proximity-based pre-conditioning**
            ‚Ä¢ Works with direction sensor for smart approach detection
            ‚Ä¢ **Example:** `sensor.home_nearest_distance`

            **Requirement:** Home Assistant proximity integration setup.
          default: sensor.home_nearest_distance
          selector:
            entity:
              domain: sensor
        
        direction_sensor:
          name: Direction of Travel Sensor
          description: |
            Sensor tracking **direction of travel** relative to home.

            **States:**

            ‚Ä¢ **towards:** Approaching home
            ‚Ä¢ **away:** Moving away from home
            ‚Ä¢ **arrived:** At home location

            **Example:** `sensor.home_nearest_direction_of_travel`
          default: sensor.home_nearest_direction_of_travel
          selector:
            entity:
              domain: sensor
        
        home_zone_distance:
          name: Home Zone Distance
          description: |
            Distance defining your **"home zone" boundary**. Controls all proximity behaviors:

            ‚Ä¢ **Within this distance:** Maintain comfort temperature, pre-condition when approaching
            ‚Ä¢ **Beyond this distance:** Switch to away mode (off or eco mode)
          default: 5000
          selector:
            number:
              min: 1000
              max: 10000
              step: 500
              unit_of_measurement: m

    # Away Mode Settings
    away_settings:
      name: "Away Mode Settings"
      icon: mdi:home-export-outline
      collapsed: true
      input:
        enable_away_mode:
          name: Enable Away Mode
          description: |
            **Turn off or set to eco** when everyone leaves.

            Automatically manages climate control based on home occupancy for **energy savings**.
          default: true
          selector:
            boolean:
        
        away_mode_action:
          name: Away Mode Action
          description: |
            What to do when **everyone leaves home**:

            ‚Ä¢ **OFF:** Turn AC completely off (saves most energy, slow to cool when returning)
            ‚Ä¢ **ECO:** Reduce to eco mode with wider temperature range (balanced energy savings)
            ‚Ä¢ **MAINTAIN:** Keep current temperature (wastes energy but fastest comfort when returning)
          default: "eco"
          selector:
            select:
              options:
                - "off"
                - "eco"
                - "maintain"
        
        enable_pre_conditioning:
          name: Enable Pre-conditioning
          description: |
            **Pre-cool/heat when approaching home**.

            Uses proximity sensors to start conditioning before arrival for **immediate comfort**.
          default: true
          selector:
            boolean:

    # Smart Mode Settings
    smart_mode_settings:
      name: "Smart Mode Settings"
      icon: mdi:brain
      collapsed: true
      input:
        helper_control_mode:
          name: Control Mode Helper Entity
          description: |
            Input Select helper for **control mode selection**.

            **Required options:**

            ‚Ä¢ **Auto:** Temperature-based control
            ‚Ä¢ **Manual:** User-controlled operation
            ‚Ä¢ **Smart:** Advanced presence-aware control

            **Example:** `input_select.climate_control_mode_living_room`
          selector:
            entity:
              domain: input_select
        
        helper_presence_detected:
          name: Last Presence Helper Entity
          description: |
            **Input DateTime helper** to track when presence was last detected.

            ‚Ä¢ **Used for** presence timeout calculations
            ‚Ä¢ **Updated automatically** by the system
            ‚Ä¢ **Required** for Smart Mode functionality

            **Example:** `input_datetime.presence_last_detected_living_room`
          selector:
            entity:
              domain: input_datetime
        
        helper_proximity_override:
          name: Proximity Override Helper Entity
          description: |
            **Input Boolean helper** for emergency temperature override.

            ‚Ä¢ **Bypasses all automation** when enabled
            ‚Ä¢ **Allows manual control** during emergencies
            ‚Ä¢ **Auto-resets** after specified duration

            **Example:** `input_boolean.climate_proximity_override_living_room`
          selector:
            entity:
              domain: input_boolean
        
        presence_timeout_minutes:
          name: Presence Timeout
          description: |
            **Minutes to wait** after leaving room before taking action.

            ‚Ä¢ **Prevents shutdown** during brief departures
            ‚Ä¢ **Common scenarios:** bathroom breaks, quick errands
            ‚Ä¢ **Recommended:** 15-30 minutes for comfort balance

            **Trade-off:** Lower values save more energy but may cause comfort issues.
          default: 15
          selector:
            number:
              min: 5
              max: 60
              step: 5
              unit_of_measurement: minutes
        
        room_presence_sensors:
          name: Room Presence Sensors (Optional)
          description: |
            **BLE, PIR or other sensors** for room-specific presence detection.

            **Supported sensor types:**

            ‚Ä¢ **BLE area sensors:** Reports room names (e.g., "Office", "Living Room")
            ‚Ä¢ **PIR sensors:** Binary sensors reporting on/off
            ‚Ä¢ **mmWave sensors:** Human presence detection
            ‚Ä¢ **Smart device sensors:** Phone/device presence

            **Example:** `sensor.phone_ble_area`, `binary_sensor.living_room_motion`
          default: []
          selector:
            entity:
              multiple: true
              domain: 
                - binary_sensor
                - sensor
        
        room_name_for_ble:
          name: Room Name for BLE Detection (Optional)
          description: |
            If using **BLE area sensors**, specify the exact room name that indicates presence.

            ‚Ä¢ **Must match sensor output exactly** (case-sensitive)
            ‚Ä¢ **Common examples:** "Office", "Living Room", "Bedroom"
            ‚Ä¢ **Check sensor state** in Developer Tools for exact string

            **Example:** "Office" for `sensor.phone_ble_area` when it reports "Office"
          default: ""
          selector:
            text:
        
        smart_mode_behavior:
          name: Smart Mode Room Absence Behavior
          description: |
            What to do when **room presence sensors detect absence** (after timeout):

            ‚Ä¢ **ECO:** Reduce to eco mode (saves power, maintains some comfort)
            ‚Ä¢ **MAINTAIN:** Keep current temperature (comfort over efficiency)
            ‚Ä¢ **OFF:** Turn off completely (maximum power savings)

            **Note:** Only applies when still home but room is empty.
          default: "eco"
          selector:
            select:
              options:
                - "eco"
                - "maintain"
                - "off"

        temp_stability_enabled:
          name: Temperature Stability Auto-Off
          description: |
            **Automatically turn off AC** when temperature remains stable for specified duration.

            **How it works:** Detects when AC job is complete (thermal equilibrium reached) to save energy.

            **Note:** Works even when people are still in room. **Requires** temperature history helper.
          default: false
          selector:
            boolean:

        stability_tolerance:
          name: Stability Temperature Tolerance
          description: |
            Temperature range considered **"stable"** for auto-off detection.

            **Sensitivity levels:**

            ‚Ä¢ **¬±0.3¬∞C:** High sensitivity (recommended for most users)
            ‚Ä¢ **¬±0.5¬∞C:** Moderate sensitivity (balanced approach)
            ‚Ä¢ **¬±1.0¬∞C:** Low sensitivity (less aggressive)

            **Rule:** Smaller values trigger auto-off sooner, larger values wait longer.
          default: 0.3
          selector:
            number:
              min: 0.1
              max: 5.0
              step: 0.1
              unit_of_measurement: "¬∞C"

        stability_duration:
          name: Stability Duration
          description: |
            **Minutes** temperature must remain stable before auto-off triggers.

            **Timing strategies:**

            ‚Ä¢ **10-15 minutes:** Aggressive energy savings
            ‚Ä¢ **20-25 minutes:** Balanced efficiency and comfort
            ‚Ä¢ **25-30 minutes:** Conservative, prioritizes comfort

            **Trade-off:** Shorter duration saves more energy but may cause temperature fluctuations.
          default: 15
          selector:
            number:
              min: 10
              max: 30
              step: 5
              unit_of_measurement: "min"

        stability_behavior:
          name: Stability Auto-Off Action  
          description: |
            What to do when temperature stability is detected:

            ‚Ä¢ OFF: Turn off completely (maximum energy savings)
            ‚Ä¢ ECO: Switch to eco mode (moderate energy savings, maintains some comfort)
          default: "off"
          selector:
            select:
              options:
                - "off"
                - "eco"

    # Scheduling Settings (Optional)
    scheduling_settings:
      name: "Time-Based Scheduling"
      icon: mdi:calendar-clock
      collapsed: true
      input:
        enable_scheduling:
          name: Enable Time-Based Scheduling
          description: |
            **Automatically adjust temperatures** based on time of day.

            **Benefits:**

            ‚Ä¢ **Optimized comfort** for different activities
            ‚Ä¢ **Energy savings** during sleeping hours
            ‚Ä¢ Cooler mornings, warmer evenings as needed
            ‚Ä¢ Separate weekend schedule option

            **Note:** Overrides base target temperature when enabled.
          default: false
          selector:
            boolean:
        
        morning_temp:
          name: Morning Temperature (6am-9am)
          description: |
            **Temperature target** for morning hours **(6am-9am)**.

            ‚Ä¢ **Typically cooler** for waking up comfort
            ‚Ä¢ Good for productivity during morning routines
            ‚Ä¢ Consider personal preferences and climate
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        day_temp:
          name: Day Temperature (9am-6pm)
          description: |
            **Temperature target** for daytime hours **(9am-6pm)**.

            ‚Ä¢ **Optimize** for work/activity comfort
            ‚Ä¢ Balance productivity and energy efficiency
            ‚Ä¢ Consider sunlight and heat gain during day
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        evening_temp:
          name: Evening Temperature (6pm-10pm)
          description: |
            **Temperature target** for evening hours **(6pm-10pm)**.

            ‚Ä¢ **Relaxation** and family time comfort
            ‚Ä¢ May prefer slightly warmer for leisure
            ‚Ä¢ Accounts for reduced outdoor temperatures
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        night_temp:
          name: Night Temperature (10pm-6am)
          description: |
            **Temperature target** for sleeping hours **(10pm-6am)**.

            ‚Ä¢ **Sleep research** recommends 18-21¬∞C for best rest
            ‚Ä¢ **Cooler temperatures** promote deeper sleep
            ‚Ä¢ **Energy savings** during extended periods
          default: 24
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        enable_weekend_schedule:
          name: Different Weekend Schedule
          description: |
            Use **different temperature schedule** on weekends.

            ‚Ä¢ **Later wake times** with extended morning periods
            ‚Ä¢ Different activity patterns and comfort needs
            ‚Ä¢ More flexible scheduling for leisure days

            **Note:** Weekend morning period: 6am-10am (vs weekday 6am-9am)
          default: false
          selector:
            boolean:
        
        weekend_morning_temp:
          name: Weekend Morning Temperature
          description: |
            **Weekend morning temperature** **(6am-10am)**.

            ‚Ä¢ **Extended morning period** for leisurely weekends
            ‚Ä¢ May prefer warmer for relaxed mornings
            ‚Ä¢ Adjust based on weekend routines and preferences
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        weekend_day_temp:
          name: Weekend Day Temperature
          description: |
            **Weekend daytime temperature** **(10am-10pm)**.

            ‚Ä¢ **Extended day period** for weekend activities
            ‚Ä¢ Covers both day and evening in one setting
            ‚Ä¢ Simplifies weekend scheduling

            **Note:** Single temperature for entire active weekend period.
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        weekend_night_temp:
          name: Weekend Night Temperature
          description: |
            **Weekend night temperature** **(10pm-6am)**.

            ‚Ä¢ **Same sleep optimization** as weeknight temperature
            ‚Ä¢ May differ if weekend bedtime routines vary
            ‚Ä¢ Maintains consistent sleep comfort

            Consider if weekend sleep patterns require different settings.
          default: 24
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "¬∞C"

    # Window Detection Settings (Optional)
    window_detection_settings:
      name: "Window Detection"
      icon: mdi:window-open
      collapsed: true
      input:
        enable_window_detection:
          name: Enable Window Detection
          description: |
            **Automatically turn off AC** when windows or doors are opened.

            **Benefits:**

            ‚Ä¢ **Prevents** cooling/heating the outdoors
            ‚Ä¢ **Significant energy savings**
            ‚Ä¢ Protects AC equipment from overwork
            ‚Ä¢ **Automatic resumption** when closed

            **Requirement:** Binary sensors on doors/windows.
          default: false
          selector:
            boolean:
        
        window_sensors:
          name: Window/Door Sensors
          description: |
            Select sensors that should **turn off AC** when opened.

            **Compatible sensors:**

            ‚Ä¢ **Door contact sensors**
            ‚Ä¢ **Window opening sensors**
            ‚Ä¢ **Magnetic reed switches**
            ‚Ä¢ **Smart window/door sensors**

            **Behavior:** All selected sensors will trigger AC shutdown when opened.
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        
        window_open_delay:
          name: Window Open Delay
          description: |
            **Minutes to wait** after window opens before turning off AC.

            ‚Ä¢ **Prevents false triggers** from brief openings
            ‚Ä¢ **0 minutes:** Immediate shutdown (most responsive)
            ‚Ä¢ **1-2 minutes:** Balanced (recommended)
            ‚Ä¢ **3+ minutes:** Delayed response

            **Result:** Brief openings won't unnecessarily stop your AC.
          default: 2
          selector:
            number:
              min: 0
              max: 10
              step: 1
              unit_of_measurement: "minutes"
        
        window_close_delay:
          name: Window Close Delay
          description: |
            **Minutes to wait** after window closes before resuming AC.

            ‚Ä¢ **Ensures window** is properly closed before restarting
            ‚Ä¢ Allows time for air exchange to stabilize
            ‚Ä¢ **Prevents rapid on/off cycling**

            **Recommendation:** Short delay to confirm sensor stability.
          default: 1
          selector:
            number:
              min: 0
              max: 10
              step: 1
              unit_of_measurement: "minutes"

    # Weather Compensation Settings (Optional)
    weather_compensation_settings:
      name: "Weather Compensation"
      icon: mdi:weather-partly-cloudy
      collapsed: true
      input:
        enable_weather_compensation:
          name: Enable Weather Compensation
          description: |
            **Adjust indoor target temperature** based on outdoor conditions.

            **How it works:**

            ‚Ä¢ **Hot outdoor weather:** Slightly raise AC target (less aggressive cooling)
            ‚Ä¢ **Mild outdoor weather:** Use normal targets
            ‚Ä¢ **Cool outdoor weather:** Lower targets for efficiency

            **Result:** Maintains comfort while optimizing energy usage based on natural conditions.
          default: false
          selector:
            boolean:
        
        weather_entity:
          name: Weather Entity
          description: |
            **Weather integration** for outdoor temperature data.

            ‚Ä¢ **Provides base** outdoor temperature readings
            ‚Ä¢ Usually `weather.home` or `weather.forecast_home`
            ‚Ä¢ **Fallback** if no dedicated outdoor sensor available

            **Recommendation:** Most users should start with their default weather integration.
          default: weather.home
          selector:
            entity:
              domain: weather
        
        outdoor_temp_sensor:
          name: Outdoor Temperature Sensor (Optional)
          description: |
            **External temperature sensor** for more accurate readings.

            ‚Ä¢ **More precise** than weather service data
            ‚Ä¢ **Real-time local conditions** vs forecast data
            ‚Ä¢ **Optional:** Falls back to weather entity if not set

            **Recommended** for users with outdoor temperature sensors.
          default: []
          selector:
            entity:
              domain: sensor
              device_class: temperature
        
        compensation_factor:
          name: Compensation Factor
          description: |
            **How much outdoor temperature affects indoor target** (0-1).

            **Factor levels:**

            ‚Ä¢ **0.0:** No compensation (disabled)
            ‚Ä¢ **0.1-0.2:** Mild adjustment (recommended)
            ‚Ä¢ **0.3-0.5:** Moderate adjustment
            ‚Ä¢ **0.6-1.0:** Aggressive adjustment

            **Example:** 0.2 factor with 30¬∞C outside adds ~1¬∞C to cooling target.
          default: 0.2
          selector:
            number:
              min: 0
              max: 1
              step: 0.1
        
        max_compensation:
          name: Maximum Compensation
          description: |
            **Maximum degrees** to adjust target temperature.

            ‚Ä¢ **Safety limit** to prevent extreme adjustments
            ‚Ä¢ **1-2¬∞C:** Conservative, maintains close to base target
            ‚Ä¢ **3-5¬∞C:** Aggressive, allows significant weather adaptation

            **Prevents** compensation from making indoor temperatures uncomfortable.
          default: 2
          selector:
            number:
              min: 1
              max: 5
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        compensation_base_temp:
          name: Compensation Base Temperature
          description: |
            **Outdoor temperature** considered "neutral" (no compensation).

            ‚Ä¢ **Temperature where no adjustment** is needed
            ‚Ä¢ **25¬∞C:** Good baseline for most climates
            ‚Ä¢ **Above baseline:** Targets increase (less aggressive cooling)
            ‚Ä¢ **Below baseline:** Targets decrease (more efficient operation)

            **Recommendation:** Adjust based on your local climate and comfort preferences.
          default: 25
          selector:
            number:
              min: 20
              max: 30
              step: 1
              unit_of_measurement: "¬∞C"

    # Fan & Swing Settings
    fan_settings:
      name: "Fan & Swing Settings"
      icon: mdi:fan
      collapsed: true
      input:
        fan_speed_max:
          name: Maximum Fan Speed
          description: |
            **Fan speed** for maximum cooling/heating conditions.

            ‚Ä¢ **Auto:** Let AC system manage fan speed
            ‚Ä¢ **Level 5/5:** Maximum airflow for rapid temperature changes
            ‚Ä¢ System auto-detects your AC's fan speed format

            **Used when:** Temperature is far from target or during initial conditioning.
          default: "Level 5"
          selector:
            select:
              options:
                - "Auto"
                - "auto"
                - "Quiet"
                - "Silence"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "1"
                - "2"
                - "3"
                - "4"
                - "5"
                - "high"
                - "medium"
                - "low"
        
        fan_speed_medium:
          name: Medium Fan Speed
          description: |
            **Fan speed** for medium cooling/heating conditions.

            ‚Ä¢ **Balanced airflow** for moderate temperature adjustments
            ‚Ä¢ Good for maintaining temperatures within comfort zone
            ‚Ä¢ System auto-detects your AC's fan speed format

            **Used when:** Temperature is moderately outside target range.
          default: "Level 3"
          selector:
            select:
              options:
                - "Auto"
                - "auto"
                - "Quiet"
                - "Silence"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "1"
                - "2"
                - "3"
                - "4"
                - "5"
                - "high"
                - "medium"
                - "low"
        
        fan_speed_eco:
          name: Eco Fan Speed
          description: |
            **Fan speed** for eco mode and comfort zone operation.

            ‚Ä¢ **Quiet, energy-efficient operation**
            ‚Ä¢ Used when temperature is within comfort zone
            ‚Ä¢ **Minimal noise** for continuous operation
            ‚Ä¢ System auto-detects your AC's fan speed format

            **Purpose:** Balances comfort with energy efficiency and noise levels.
          default: "Level 1"
          selector:
            select:
              options:
                - "Auto"
                - "auto"
                - "Quiet"
                - "Silence"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "1"
                - "2"
                - "3"
                - "4"
                - "5"
                - "high"
                - "medium"
                - "low"
        
        swing_mode_active:
          name: Active Swing Mode
          description: |
            **Swing mode** when actively cooling/heating.

            ‚Ä¢ **both:** Full directional coverage (recommended)
            ‚Ä¢ **horizontal:** Left-right movement only
            ‚Ä¢ **vertical:** Up-down movement only
            ‚Ä¢ **off:** Fixed direction

            **Benefit:** Better air circulation helps achieve target temperatures faster.
          default: "both"
          selector:
            select:
              options:
                - "off"
                - "both"
                - "vertical"
                - "horizontal"

    # Power Efficiency Settings
    efficiency_settings:
      name: "Power Efficiency Settings"
      icon: mdi:leaf
      collapsed: true
      input:
        enable_eco_mode:
          name: Enable Eco Mode
          description: |
            **When temperature is in comfort zone:**

            ‚Ä¢ **ON** = Eco mode (low power, maintains temp, uses ~150-250W)
            ‚Ä¢ **OFF** = Turn off completely (zero power, allows drift, saves more energy)
          default: false
          selector:
            boolean:
        
        eco_mode_setpoint_offset:
          name: Eco Mode Setpoint Offset
          description: |
            **Degrees to adjust setpoint** in eco mode to reduce cycling.

            ‚Ä¢ **0¬∞C:** Standard eco mode (maintains exact target)
            ‚Ä¢ **1¬∞C:** Relaxed eco mode (recommended)
            ‚Ä¢ **2-3¬∞C:** Very relaxed (maximum efficiency)

            **Rule:** Higher values reduce compressor cycling and save more energy.
          default: 1
          selector:
            number:
              min: 0
              max: 3
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        min_runtime_minutes:
          name: Minimum Runtime
          description: |
            **Minimum minutes** A/C must run before allowing mode change.

            ‚Ä¢ **Prevents rapid on/off cycling** (protects compressor)
            ‚Ä¢ **5-10 minutes:** Aggressive efficiency
            ‚Ä¢ **15-20 minutes:** Balanced approach (recommended)
            ‚Ä¢ **25-30 minutes:** Conservative, equipment protection

            **Benefit:** Extends compressor lifespan and improves efficiency.
          default: 15
          selector:
            number:
              min: 5
              max: 30
              unit_of_measurement: minutes
        
        min_off_time_minutes:
          name: Minimum Off Time
          description: |
            **Minimum minutes** A/C must be off before restarting.

            ‚Ä¢ **Allows compressor pressure** to equalize
            ‚Ä¢ **3-5 minutes:** Minimum for compressor safety
            ‚Ä¢ **10 minutes:** Recommended balance
            ‚Ä¢ **15 minutes:** Conservative protection

            **Critical** for compressor longevity and energy efficiency.
          default: 10
          selector:
            number:
              min: 3
              max: 15
              unit_of_measurement: minutes
        
        enable_gradual_adjustment:
          name: Enable Gradual Temperature Adjustment
          description: |
            **Gradually adjust temperature** instead of immediate changes.

            ‚Ä¢ **Smoother operation** with less temperature overshoot
            ‚Ä¢ **More comfortable** temperature transitions
            ‚Ä¢ **Better energy efficiency** through controlled adjustment
            ‚Ä¢ Reduces wear on AC equipment

            **Recommendation:** For most users for optimal comfort and efficiency.
          default: true
          selector:
            boolean:
        
        extreme_temp_override:
          name: Extreme Temperature Override
          description: |
            **Temperature thresholds** that override Manual mode for safety.

            **Emergency override:** Above high or below low will activate climate even in Manual mode.
          default: true
          selector:
            boolean:
        
        extreme_high_temp:
          name: Extreme High Temperature
          description: |
            **Safety threshold** - activate cooling even in Manual mode.

            ‚Ä¢ **Emergency override** for extremely hot conditions
            ‚Ä¢ **Protects health** and equipment from overheating
            ‚Ä¢ Only activates when indoor temperature exceeds threshold
            ‚Ä¢ **Returns to Manual mode** once temperature normalizes

            **Recommendation:** Set based on your comfort limits and local climate conditions.
          default: 30
          selector:
            number:
              min: 28
              max: 35
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        extreme_low_temp:
          name: Extreme Low Temperature
          description: |
            **Safety threshold** - activate heating even in Manual mode.

            ‚Ä¢ **Emergency override** for extremely cold conditions
            ‚Ä¢ **Prevents pipes freezing** and health risks
            ‚Ä¢ Only activates when indoor temperature falls below threshold
            ‚Ä¢ **Returns to Manual mode** once temperature normalizes

            **Recommendation:** Set based on your heating needs and local climate conditions.
          default: 15
          selector:
            number:
              min: 10
              max: 18
              step: 0.5
              unit_of_measurement: "¬∞C"

    # Advanced Settings
    advanced_settings:
      name: "Advanced Settings"
      icon: mdi:cog
      collapsed: true
      input:
        enable_dynamic_adaptation:
          name: Enable Dynamic Adaptation
          description: |
            **Automatically escalate/de-escalate** cooling/heating power based on effectiveness.

            **How it works:**

            ‚Ä¢ **Monitors temperature progress** toward target
            ‚Ä¢ **Increases power** when progress stalls
            ‚Ä¢ **Reduces power** when target is approaching
            ‚Ä¢ **Learns** your AC's effectiveness over time

            **Requirement:** Helper entities for temperature tracking and analysis.
          default: true
          selector:
            boolean:
        
        effectiveness_check_minutes:
          name: Effectiveness Check Interval
          description: |
            **Minutes to wait** before checking if current mode is working.

            ‚Ä¢ **5-10 minutes:** Responsive adaptation
            ‚Ä¢ **15 minutes:** Balanced approach (recommended)
            ‚Ä¢ **20-30 minutes:** Conservative, gives more time for AC to work

            **Trade-off:** Too short may cause excessive mode switching; too long delays optimization.
          default: 10
          selector:
            number:
              min: 5
              max: 30
              unit_of_measurement: minutes
        
        escalation_temp_tolerance:
          name: Temperature Stall Tolerance
          description: |
            **Degrees of acceptable temperature drift** before escalating power.

            **Tolerance levels:**

            ‚Ä¢ **0.5-1.0¬∞C:** Aggressive response (tight control)
            ‚Ä¢ **1.0-2.0¬∞C:** Balanced approach (recommended)
            ‚Ä¢ **2.0-3.0¬∞C:** Patient response (allows more drift)

            **Trade-off:** Lower values provide tighter control but may increase cycling.
          default: 1.0
          selector:
            number:
              min: 0.5
              max: 3.0
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        deescalation_approach_threshold:
          name: De-escalation Approach Threshold
          description: |
            **Degrees from target** when system can de-escalate power.

            ‚Ä¢ **Prevents overshooting** target temperature
            ‚Ä¢ **1.0-2.0¬∞C:** Aggressive de-escalation
            ‚Ä¢ **2.0-3.0¬∞C:** Balanced approach (recommended)
            ‚Ä¢ **3.0-4.0¬∞C:** Conservative, maintains power longer

            **Note:** Works when temperature is trending correctly toward target.
          default: 2.0
          selector:
            number:
              min: 1.0
              max: 4.0
              step: 0.5
              unit_of_measurement: "¬∞C"
        
        helper_temp_history:
          name: Temperature History Helper (Optional)
          description: |
            **Input Number helper** to store previous temperature reading.

            ‚Ä¢ **Tracks temperature changes** over time
            ‚Ä¢ **Required** for dynamic adaptation features
            ‚Ä¢ **Automatically updated** by the system
            ‚Ä¢ **Range:** 0-50¬∞C with 0.1¬∞C steps

            **Example:** `input_number.climate_temp_history_living_room`
          default: []
          selector:
            entity:
              domain: input_number
        
        helper_trend_direction:
          name: Trend Direction Helper (Optional)
          description: |
            **Input Text helper** to track temperature trend direction.

            ‚Ä¢ **Stores:** rising, falling, or stable
            ‚Ä¢ **Required** for dynamic adaptation logic
            ‚Ä¢ **Automatically updated** by the system
            ‚Ä¢ **Used to determine** when to escalate/de-escalate

            **Example:** `input_text.climate_trend_direction_living_room`
          default: []
          selector:
            entity:
              domain: input_text
        
        helper_mode_start_time:
          name: Mode Start Time Helper (Optional)
          description: |
            **Input DateTime helper** to track when current mode started.

            ‚Ä¢ **Timestamp** when current AC mode began
            ‚Ä¢ **Required** for effectiveness calculations
            ‚Ä¢ **Used to determine** how long to wait before changes
            ‚Ä¢ **Automatically updated** by the system

            **Example:** `input_datetime.climate_mode_start_time_living_room`
          default: []
          selector:
            entity:
              domain: input_datetime
        
        helper_effectiveness_score:
          name: Effectiveness Score Helper (Optional)
          description: |
            **Input Number helper** to track how well current mode is working (0-100%).

            ‚Ä¢ **0%:** Mode not working (temperature getting worse)
            ‚Ä¢ **50%:** Mode working slowly
            ‚Ä¢ **100%:** Mode working effectively
            ‚Ä¢ **Used to decide** escalation/de-escalation

            **Example:** `input_number.climate_effectiveness_score_living_room`
          default: []
          selector:
            entity:
              domain: input_number
        
        helper_temp_stable_since:
          name: Temperature Stable Since Helper (Optional)
          description: |
            **Input DateTime helper** to track when temperature became stable.

            ‚Ä¢ **Timestamp** when temperature entered stable range
            ‚Ä¢ **Required** for stability auto-off feature
            ‚Ä¢ **Used to calculate** how long temperature has been stable
            ‚Ä¢ **Automatically updated** by the system

            **Example:** `input_datetime.temp_stable_since_living_room`
          default: []
          selector:
            entity:
              domain: input_datetime
        
        helper_last_transition:
          name: Last Transition Helper (Optional)
          description: |
            **Input Text helper** to track last temperature zone transition.

            ‚Ä¢ **Stores:** to_cooling, to_heating, to_comfort, etc.
            ‚Ä¢ **Used for hysteresis** to prevent rapid switching
            ‚Ä¢ **Prevents oscillation** at temperature boundaries
            ‚Ä¢ **Automatically updated** by the system

            **Example:** `input_text.climate_last_transition_living_room`
          default: []
          selector:
            entity:
              domain: input_text
        
        hysteresis_tolerance:
          name: Hysteresis Tolerance
          description: |
            **Temperature tolerance** for preventing rapid switching (¬±¬∞C).

            ‚Ä¢ **Prevents oscillation** at temperature boundaries
            ‚Ä¢ **0.1-0.3¬∞C:** Sensitive (may cause more switching)
            ‚Ä¢ **0.3-0.5¬∞C:** Balanced approach (recommended)
            ‚Ä¢ **0.5-1.0¬∞C:** Conservative (less switching)

            **Rule:** System won't change modes unless temperature exceeds threshold by this amount.
          default: 0.3
          selector:
            number:
              min: 0.1
              max: 1.0
              step: 0.1
              unit_of_measurement: "¬∞C"
        
        enable_debug_logging:
          name: Enable Debug Logging
          description: |
            **Enable detailed warning-level logs** for troubleshooting.

            ‚Ä¢ **Shows decision-making process** and sensor states
            ‚Ä¢ **Helps diagnose** automation issues
            ‚Ä¢ **View logs** in Settings ‚Üí System ‚Üí Logs
            ‚Ä¢ **WARNING:** Creates many log entries!

            **Recommendation:** Enable only when troubleshooting - disable for normal operation.
          default: false
          selector:
            boolean:
        
        check_interval_minutes:
          name: Check Interval
          description: |
            **How often to check conditions** and evaluate temperature (in minutes).

            ‚Ä¢ **1-3 minutes:** Very responsive (more CPU usage)
            ‚Ä¢ **5 minutes:** Balanced approach (recommended)
            ‚Ä¢ **10+ minutes:** Conservative (less responsive)

            **Trade-off:** Lower intervals provide tighter control but increase system load.
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
              unit_of_measurement: minutes
              mode: slider

    # Notification Settings
    notifications:
      name: "Notification Settings"
      icon: mdi:bell
      collapsed: true
      input:
        enable_notifications:
          name: Enable Notifications
          description: |
            **Enable push notifications** when the climate control system makes changes.

            **Notifications include:** Mode switches, temperature adjustments, and system status updates.
          default: true
          selector:
            boolean:
        
        notification_service:
          name: Notification Service
          description: |
            **Primary notification service** to send alerts to.

            **Common options:** `notify.notify`, `notify.mobile_app_yourphone`, `notify.pushbullet`
          default: notify.notify
          selector:
            text:
        
        additional_notify_services:
          name: Additional Notification Services
          description: |
            Additional services to notify beyond the primary service.

            ‚Ä¢ One service per line
            ‚Ä¢ Useful for multiple people or notification methods
            ‚Ä¢ Examples: notify.mobile_app_phone2, notify.telegram

            Leave empty if only one notification service is needed.
          default: []
          selector:
            text:
              multiple: true

    # Adaptive Control Mode Settings
    adaptive_control:
      name: "Adaptive Control Mode Settings"
      icon: mdi:auto-mode
      collapsed: true
      input:
        enable_adaptive_control:
          name: Enable Adaptive Control Mode
          description: |
            **Automatically switches control modes** based on room occupancy patterns.

            **How it works:**

            ‚Ä¢ **Room becomes occupied** ‚Üí Switch to Auto/Smart mode after configurable delay
            ‚Ä¢ **Room becomes vacant** ‚Üí Switch to Manual mode and turn AC off after delay

            **REQUIREMENTS:**

            ‚Ä¢ **Room presence sensors** configured in Smart Mode Settings
            ‚Ä¢ PIR/motion sensors, BLE tracking devices, or occupancy sensors
            ‚Ä¢ **Last Presence Helper Entity** (input_datetime) to track timing
            ‚Ä¢ **Smart Mode** must be properly configured

            **Use cases:** Automatic comfort when you enter, energy savings when you leave.
          default: false
          selector:
            boolean:
        
        adaptive_occupied_delay:
          name: Occupied Delay (minutes)
          description: |
            **How long to wait** after detecting room presence before switching from Manual to Auto/Smart mode.

            ‚Ä¢ **Shorter delays:** More responsive but may switch too frequently
            ‚Ä¢ **Longer delays:** Less responsive but avoids unnecessary switching

            **Recommended:** 5 minutes for balanced behavior.
          default: 5
          selector:
            number:
              min: 1
              max: 60
              step: 1
              unit_of_measurement: minutes
              mode: slider
        
        adaptive_vacant_delay:
          name: Vacant Delay (minutes)
          description: |
            **How long to wait** after room becomes vacant before switching to Manual mode and turning AC off.

            ‚Ä¢ **Shorter delays:** Better energy savings but may turn off too quickly
            ‚Ä¢ **Longer delays:** More comfort for brief departures but wastes energy

            **Recommended:** 15 minutes to handle brief absences without wasting energy.
          default: 15
          selector:
            number:
              min: 5
              max: 120
              step: 5
              unit_of_measurement: minutes
              mode: slider
        
        adaptive_target_mode:
          name: Target Mode When Occupied
          description: |
            **Which control mode** to activate when room occupancy is detected.

            ‚Ä¢ **Auto Mode:** Standard automatic temperature control
            ‚Ä¢ **Smart Mode:** Advanced occupancy-based control with presence timeout

            **Recommendation:** Choose Smart Mode if you want the most intelligent behavior.
          default: "auto"
          selector:
            select:
              options:
                - label: "Auto Mode"
                  value: "auto"
                - label: "Smart Mode"
                  value: "smart"
        
        adaptive_override_timeout:
          name: Manual Override Timeout (hours)
          description: |
            **How long to respect manual user changes** before resuming adaptive control.

            When you **manually change climate settings**, adaptive control will pause for this duration.

            ‚Ä¢ **0 hours:** No override protection (always allow adaptive switching)
            ‚Ä¢ **1-4 hours:** Good for temporary comfort adjustments
            ‚Ä¢ **8+ hours:** Good for energy-saving periods or when pets are sensitive

            **Common scenarios:**

            ‚Ä¢ You turn off AC because pets are cold ‚Üí **System waits** before turning back on
            ‚Ä¢ You manually adjust temperature for comfort ‚Üí **System respects** your preference
            ‚Ä¢ You turn off AC to save energy ‚Üí **System stays off** for the configured time

            **Recommended:** 2 hours for most situations.
          default: 2
          selector:
            number:
              min: 0
              max: 24
              step: 0.5
              unit_of_measurement: hours
              mode: slider
        
        adaptive_override_helper:
          name: Override Helper (Optional)
          description: |
            **Optional input_boolean helper** to manually disable adaptive control.

            When configured and set to **ON**, adaptive control will be **completely disabled** until turned OFF.

            **Example helper names:**

            ‚Ä¢ `input_boolean.climate_adaptive_override_office`
            ‚Ä¢ `input_boolean.ac_manual_override_bedroom`
            ‚Ä¢ `input_boolean.disable_adaptive_living_room`

            **Use this for:** Permanent manual control periods or when you want full override control via dashboard toggles.
          default: ""
          selector:
            entity:
              domain: input_boolean
              multiple: false

variables:
  climate_list: !input climate_entities
  persons: !input presence_persons
  devices: !input presence_devices
  eco_enabled: !input enable_eco_mode
  gradual_enabled: !input enable_gradual_adjustment
  away_action: !input away_mode_action
  temp_sensor: !input temperature_sensor
  use_avg: !input use_average_temperature
  helper_mode: !input helper_last_mode
  helper_change: !input helper_last_change
  proximity_sensor_input: !input proximity_sensor
  direction_sensor_input: !input direction_sensor
  
  # Simple temperature inputs
  target_temp: !input target_temperature
  comfort_width: !input comfort_zone_width
  aggressiveness: !input temperature_aggressiveness
  advanced_enabled: !input enable_advanced_temp
  
  # Store advanced inputs if enabled
  comfort_min_input: !input comfort_min_temp
  comfort_max_input: !input comfort_max_temp
  cooling_target_input: !input cooling_target_temp
  heating_target_input: !input heating_target_temp
  cooling_medium_input: !input cooling_medium_temp
  cooling_high_input: !input cooling_high_temp
  heating_medium_input: !input heating_medium_temp
  heating_low_input: !input heating_low_temp
  
  # Calculate comfort zones based on base target (before weather adjustment)
  base_comfort_min: "{{ comfort_min_input if advanced_enabled else (target_temp - comfort_width) | float }}"
  base_comfort_max: "{{ comfort_max_input if advanced_enabled else (target_temp + comfort_width) | float }}"
  base_cooling_target: "{{ cooling_target_input if advanced_enabled else target_temp | float }}"
  base_heating_target: "{{ heating_target_input if advanced_enabled else target_temp | float }}"
  
  # Auto-calculate base thresholds based on aggressiveness (smooth graduated response)
  base_cooling_medium: "{{ cooling_medium_input if advanced_enabled else base_comfort_max | round(1) }}"
  base_cooling_high: "{{ cooling_high_input if advanced_enabled else (base_comfort_max + aggressiveness/2) | round(1) }}"
  base_heating_medium: "{{ heating_medium_input if advanced_enabled else base_comfort_min | round(1) }}"
  base_heating_low: "{{ heating_low_input if advanced_enabled else (base_comfort_min - aggressiveness/2) | round(1) }}"
  
  enable_pre_conditioning: !input enable_pre_conditioning
  enable_away_mode: !input enable_away_mode
  enable_notifications: !input enable_notifications
  eco_mode_setpoint_offset: !input eco_mode_setpoint_offset
  # Dynamic adaptation settings
  dynamic_enabled: !input enable_dynamic_adaptation
  effectiveness_check_mins: !input effectiveness_check_minutes
  temp_tolerance: !input escalation_temp_tolerance
  deescalation_threshold: !input deescalation_approach_threshold
  helper_temp_history: !input helper_temp_history
  helper_trend: !input helper_trend_direction
  helper_mode_time: !input helper_mode_start_time
  helper_effectiveness: !input helper_effectiveness_score
  last_mode: "{{ states(helper_mode) | default('off') }}"
  last_change: "{{ states(helper_change) | default(now()) }}"
  runtime_min: !input min_runtime_minutes
  offtime_min: !input min_off_time_minutes
  # Smart mode settings
  control_mode_helper: !input helper_control_mode
  presence_detected_helper: !input helper_presence_detected
  proximity_override_helper: !input helper_proximity_override
  presence_timeout: !input presence_timeout_minutes
  home_zone_distance: !input home_zone_distance
  room_sensors: !input room_presence_sensors
  room_ble_name: !input room_name_for_ble
  smart_behavior: !input smart_mode_behavior
  temp_stability_enabled: !input temp_stability_enabled
  stability_tolerance: !input stability_tolerance
  stability_duration: !input stability_duration
  stability_behavior: !input stability_behavior
  extreme_override: !input extreme_temp_override
  extreme_high: !input extreme_high_temp
  extreme_low: !input extreme_low_temp
  # New v2.1+ features - Scheduling
  enable_scheduling: !input enable_scheduling
  morning_temp: !input morning_temp
  day_temp: !input day_temp
  evening_temp: !input evening_temp
  night_temp: !input night_temp
  enable_weekend_schedule: !input enable_weekend_schedule
  weekend_morning_temp: !input weekend_morning_temp
  weekend_day_temp: !input weekend_day_temp
  weekend_night_temp: !input weekend_night_temp
  # New v2.1+ features - Window Detection
  enable_window_detection: !input enable_window_detection
  window_sensors: !input window_sensors
  window_open_delay: !input window_open_delay
  window_close_delay: !input window_close_delay
  # New v2.1+ features - Weather Compensation
  enable_weather_compensation: !input enable_weather_compensation
  weather_entity: !input weather_entity
  outdoor_temp_sensor: !input outdoor_temp_sensor
  compensation_factor: !input compensation_factor
  max_compensation: !input max_compensation
  compensation_base_temp: !input compensation_base_temp
  # New v2.1+ helpers - Stability and Hysteresis
  helper_temp_stable_since: !input helper_temp_stable_since
  helper_last_transition: !input helper_last_transition
  hysteresis_tolerance: !input hysteresis_tolerance
  # Adaptive Control Mode variables
  adaptive_enabled: !input enable_adaptive_control
  adaptive_occupied_delay: !input adaptive_occupied_delay
  adaptive_vacant_delay: !input adaptive_vacant_delay
  adaptive_target_mode: !input adaptive_target_mode
  adaptive_override_timeout: !input adaptive_override_timeout
  adaptive_override_helper: !input adaptive_override_helper

trigger:
  - platform: state
    entity_id: !input climate_entities
    attribute: current_temperature
    id: temp_change
  
  - platform: state
    entity_id: !input temperature_sensor
    id: external_temp_change
  
  # Single time pattern trigger based on selected interval
  - platform: time_pattern
    minutes: "/1"
    id: periodic_check
  
  - platform: state
    entity_id: !input direction_sensor
    to: "towards"
    id: heading_home
  
  - platform: state
    entity_id: !input direction_sensor
    to: "arrived"
    id: arrived
  
  - platform: state
    entity_id: !input presence_persons
    id: presence_change
  
  - platform: state
    entity_id: !input presence_devices
    id: device_change

condition: []

action:
  # Store inputs as variables first
  - variables:
      check_interval: !input check_interval_minutes
      debug_enabled: !input enable_debug_logging
      proximity_sensor: "{{ proximity_sensor_input if proximity_sensor_input not in [none, '', 'unavailable', 'unknown'] else none }}"
      direction_sensor: "{{ direction_sensor_input if direction_sensor_input not in [none, '', 'unavailable', 'unknown'] else none }}"
      # Dynamic adaptation variables
      previous_temp: >
        {% if helper_temp_history %}
          {{ states(helper_temp_history) | float(0) }}
        {% else %}
          0
        {% endif %}
      current_trend: >
        {% if helper_trend %}
          {{ states(helper_trend) | default('stable') }}
        {% else %}
          stable
        {% endif %}
      mode_start_time: >
        {% if helper_mode_time %}
          {{ states(helper_mode_time) | default(now()) | as_datetime }}
        {% else %}
          {{ now() }}
        {% endif %}
      current_effectiveness: >
        {% if helper_effectiveness %}
          {{ states(helper_effectiveness) | float(50) }}
        {% else %}
          50
        {% endif %}
      should_proceed: >
        {% if trigger.id == 'periodic_check' %}
          {% set mins = now().minute %}
          {% set interval = check_interval | int(1) %}
          {% if interval > 0 %}
            {{ (mins % interval) == 0 }}
          {% else %}
            true
          {% endif %}
        {% else %}
          true
        {% endif %}
  
  # Continue with automation if conditions are met
  - condition: template
    value_template: "{{ should_proceed }}"
  
  # Debug: Log automation trigger
  - if:
      - condition: template
        value_template: "{{ debug_enabled }}"
    then:
      - service: system_log.write
        data:
          message: >
            üè† Climate System Activated
            {% if trigger.id == 'temp_change' %}üìä Temperature changed{% elif trigger.id == 'presence_change' %}üë§ Someone arrived/left{% elif trigger.id == 'periodic_check' %}‚è∞ Routine check{% else %}üîÑ {{ trigger.id }}{% endif %}
            
            üìã Technical: {{ trigger.platform }}/{{ trigger.entity_id | default('timer') }}/{{ check_interval }}min
          level: warning
          logger: blueprints.climate_control
  
  - variables:
      current_temp: >
        {% if temp_sensor %}
          {{ states(temp_sensor) | float(25) }}
        {% elif use_avg %}
          {% set temps = namespace(values=[]) %}
          {% for entity in climate_list %}
            {% set temps.values = temps.values + [state_attr(entity, 'current_temperature')] %}
          {% endfor %}
          {{ temps.values | average | round(1) }}
        {% else %}
          {{ state_attr(climate_list[0], 'current_temperature') | float(25) }}
        {% endif %}
      
      # Calculate base target temperature with scheduling
      scheduled_target_temp: >
        {% if enable_scheduling %}
          {% set hour = now().hour %}
          {% set is_weekend = now().weekday() >= 5 %}
          {% if is_weekend and enable_weekend_schedule %}
            {% if 6 <= hour < 10 %}
              {{ weekend_morning_temp }}
            {% elif 10 <= hour < 22 %}
              {{ weekend_day_temp }}
            {% else %}
              {{ weekend_night_temp }}
            {% endif %}
          {% else %}
            {% if 6 <= hour < 9 %}
              {{ morning_temp }}
            {% elif 9 <= hour < 18 %}
              {{ day_temp }}
            {% elif 18 <= hour < 22 %}
              {{ evening_temp }}
            {% else %}
              {{ night_temp }}
            {% endif %}
          {% endif %}
        {% else %}
          {{ target_temp }}
        {% endif %}
      
      # Apply weather compensation to target temperature
      weather_adjusted_target: >
        {% if enable_weather_compensation %}
          {% if outdoor_temp_sensor %}
            {% set outdoor = states(outdoor_temp_sensor) | float(25) %}
          {% else %}
            {% set outdoor = state_attr(weather_entity, 'temperature') | float(25) %}
          {% endif %}
          {% set compensation = ((outdoor - compensation_base_temp) * compensation_factor) | round(1) %}
          {% set compensation = [[-max_compensation, compensation] | max, max_compensation] | min %}
          {{ (scheduled_target_temp + compensation) | round(1) }}
        {% else %}
          {{ scheduled_target_temp }}
        {% endif %}
      
      # Calculate weather-adjusted comfort zones and thresholds
      comfort_min_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_comfort_min + adjustment) | round(1) }}
      
      comfort_max_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_comfort_max + adjustment) | round(1) }}
      
      cooling_target_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_cooling_target + adjustment) | round(1) }}
      
      heating_target_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_heating_target + adjustment) | round(1) }}
      
      cooling_medium_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_cooling_medium + adjustment) | round(1) }}
      
      cooling_high_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_cooling_high + adjustment) | round(1) }}
      
      heating_medium_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_heating_medium + adjustment) | round(1) }}
      
      heating_low_temp: >
        {% set adjustment = weather_adjusted_target - target_temp %}
        {{ (base_heating_low + adjustment) | round(1) }}
      
      # Check window sensors
      window_open: >
        {% if enable_window_detection %}
          {% set open = namespace(value=false) %}
          {% for sensor in window_sensors %}
            {% if is_state(sensor, 'on') %}
              {% set open.value = true %}
            {% endif %}
          {% endfor %}
          {{ open.value }}
        {% else %}
          false
        {% endif %}
      
      anyone_home: >
        {% set home = namespace(value=false) %}
        {% for person in persons %}
          {% if is_state(person, 'home') %}
            {% set home.value = true %}
          {% endif %}
        {% endfor %}
        {% if not home.value %}
          {% for device in devices %}
            {% if is_state(device, 'on') or is_state(device, 'PowerOn') %}
              {% set home.value = true %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ home.value }}
      
      approaching_home: >
        {% if direction_sensor and proximity_sensor %}
          {{ is_state(direction_sensor, 'towards') and 
             states(proximity_sensor) | float(10000) < home_zone_distance }}
        {% else %}
          false
        {% endif %}
      
      time_since_change: >
        {{ (as_timestamp(now()) - as_timestamp(states[climate_list[0]].last_changed)) / 60 }}
      
      # Dynamic adaptation calculations
      time_in_current_mode: >
        {% set mode_time_val = states(helper_mode_time) if helper_mode_time else 'unknown' %}
        {% if mode_time_val not in ['unknown', 'unavailable', '', None] %}
          {% set mode_timestamp = as_timestamp(mode_time_val) %}
          {% if mode_timestamp %}
            {{ ((as_timestamp(now()) - mode_timestamp) / 60) | round(1) | abs }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      
      # Calculate actual temperature stability time (when temp last changed significantly)
      temp_stability_time: >
        {% if helper_temp_history and helper_temp_stable_since %}
          {% set temp_diff = (current_temp - previous_temp) | abs %}
          {% if temp_diff <= stability_tolerance %}
            {% set stable_since = states(helper_temp_stable_since) %}
            {% if stable_since not in ['unknown', 'unavailable', '', None] %}
              {% set stable_timestamp = as_timestamp(stable_since) %}
              {% if stable_timestamp %}
                {{ ((as_timestamp(now()) - stable_timestamp) / 60) | round(1) }}
              {% else %}
                0
              {% endif %}
            {% else %}
              {# Stable since not set, assume just became stable #}
              0
            {% endif %}
          {% else %}
            {# Temperature changed significantly, stability time is 0 #}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      
      temp_change_rate: >
        {% if previous_temp > 0 and current_temp != previous_temp %}
          {% set interval_num = check_interval | int(1) %}
          {% if interval_num > 0 %}
            {{ ((current_temp - previous_temp) / interval_num) | round(2) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      
      calculated_trend: >
        {% if temp_change_rate > 0.2 %}
          rising
        {% elif temp_change_rate < -0.2 %}
          falling  
        {% else %}
          stable
        {% endif %}
      
      temp_stability_detected: >
        {% if temp_stability_enabled and helper_temp_history %}
          {% set temp_diff = (current_temp - previous_temp) | abs %}
          {% set time_threshold = stability_duration | float %}
          {% if temp_diff <= stability_tolerance and calculated_trend == 'stable' %}
            {% if temp_stability_time >= time_threshold %}
              {% if last_mode not in ['off', 'stability_off', 'stability_eco', 'unavailable', 'unknown', none] %}
                true
              {% else %}
                false
              {% endif %}
            {% else %}
              false
            {% endif %}
          {% else %}
            false
          {% endif %}
        {% else %}
          false
        {% endif %}
      
      distance_from_target: >
        {% if current_temp > comfort_max_temp %}
          {{ (current_temp - cooling_target_temp) | abs }}
        {% elif current_temp < comfort_min_temp %}
          {{ (current_temp - heating_target_temp) | abs }}
        {% else %}
          0
        {% endif %}
      
      # Hysteresis logic - prevent rapid switching at temperature boundaries
      last_transition: >
        {% if helper_last_transition %}
          {{ states(helper_last_transition) | default('none') }}
        {% else %}
          none
        {% endif %}
      
      cooling_with_hysteresis: >
        {% if last_transition == 'heating' %}
          {# Coming from heating - need extra margin to switch to cooling #}
          {{ current_temp > (comfort_max_temp + hysteresis_tolerance) }}
        {% else %}
          {# Standard cooling threshold #}
          {{ current_temp > comfort_max_temp }}
        {% endif %}
      
      heating_with_hysteresis: >
        {% if last_transition == 'cooling' %}
          {# Coming from cooling - need extra margin to switch to heating #}
          {{ current_temp < (comfort_min_temp - hysteresis_tolerance) }}
        {% else %}
          {# Standard heating threshold #}
          {{ current_temp < comfort_min_temp }}
        {% endif %}
      
      should_escalate: >
        {% if not dynamic_enabled %}
          false
        {% elif time_in_current_mode < effectiveness_check_mins %}
          false
        {% elif last_mode in ['cooling', 'heating'] and calculated_trend == 'rising' and current_temp > comfort_max_temp %}
          true
        {% elif last_mode in ['cooling', 'heating'] and calculated_trend == 'falling' and current_temp < comfort_min_temp %}
          true
        {% elif distance_from_target > temp_tolerance and calculated_trend == 'stable' %}
          true
        {% else %}
          false
        {% endif %}
      
      # Smart mode calculations
      control_mode: >
        {% if control_mode_helper %}
          {{ states(control_mode_helper) | default('Auto') }}
        {% else %}
          Auto
        {% endif %}
      
      room_presence_detected: >
        {% set presence = namespace(value=false) %}
        {% for sensor in room_sensors %}
          {% set sensor_state = states(sensor) | lower %}
          {% if is_state(sensor, 'on') or is_state(sensor, 'detected') or is_state(sensor, 'occupied') %}
            {% set presence.value = true %}
          {% elif room_ble_name and sensor_state == room_ble_name | lower %}
            {% set presence.value = true %}
          {% elif sensor_state in ['home', 'present'] %}
            {% set presence.value = true %}
          {% endif %}
        {% endfor %}
        {{ presence.value }}
      
      last_presence_time: >
        {% if presence_detected_helper and states(presence_detected_helper) not in ['unknown', 'unavailable', ''] %}
          {{ states(presence_detected_helper) | as_datetime }}
        {% else %}
          {{ now() }}
        {% endif %}
      
      minutes_since_presence: >
        {% if room_presence_detected %}
          0
        {% else %}
          {% set presence_time_val = states(presence_detected_helper) if presence_detected_helper else 'unknown' %}
          {% if presence_time_val not in ['unknown', 'unavailable', '', None] %}
            {% set presence_timestamp = as_timestamp(presence_time_val) %}
            {% if presence_timestamp %}
              {{ ((as_timestamp(now()) - presence_timestamp) / 60) | round(0) | abs }}
            {% else %}
              999
            {% endif %}
          {% else %}
            999
          {% endif %}
        {% endif %}
      
      current_distance: >
        {% if proximity_sensor %}
          {{ states(proximity_sensor) | float(99999) }}
        {% else %}
          99999
        {% endif %}
      
      proximity_zone: >
        {% if current_distance < home_zone_distance %}
          home
        {% else %}
          away
        {% endif %}
      
      smart_presence_active: >
        {% if control_mode == 'Manual' %}
          false
        {% elif room_presence_detected %}
          true
        {% elif minutes_since_presence < presence_timeout %}
          true
        {% elif proximity_zone == 'home' %}
          true
        {% elif anyone_home and control_mode == 'Auto' %}
          true
        {% else %}
          false
        {% endif %}
      
      extreme_temp_detected: >
        {% if not extreme_override %}
          false
        {% elif current_temp > extreme_high %}
          hot
        {% elif current_temp < extreme_low %}
          cold
        {% else %}
          false
        {% endif %}
      
      should_activate: >
        {% if control_mode == 'Manual' and extreme_temp_detected not in [false, 'false'] and (room_presence_detected or approaching_home) %}
          true
        {% elif control_mode == 'Manual' %}
          false
        {% elif control_mode == 'Smart' %}
          {{ smart_presence_active }}
        {% else %}
          {{ anyone_home or approaching_home }}
        {% endif %}
  
  # Update presence helper only when room presence FIRST becomes detected (not continuously)
  - if:
      - condition: template
        value_template: "{{ room_presence_detected and presence_detected_helper not in [none, '', 'unavailable', 'unknown'] }}"
      - condition: template
        value_template: >
          {% set last_presence = states(presence_detected_helper) %}
          {% if last_presence not in ['unknown', 'unavailable', ''] %}
            {% set time_since_update = (as_timestamp(now()) - as_timestamp(last_presence)) / 60 %}
            {{ time_since_update > 2 }}
          {% else %}
            true
          {% endif %}
    then:
      - service: input_datetime.set_datetime
        target:
          entity_id: "{{ presence_detected_helper }}"
        data:
          datetime: "{{ now() }}"
  
  # Update temperature stability tracking - record when temp became stable
  - condition: template
    value_template: "{{ helper_temp_stable_since not in [none, '', 'unavailable', 'unknown'] and helper_temp_history not in [none, '', 'unavailable', 'unknown'] }}"
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {% set temp_diff = (current_temp - previous_temp) | abs %}
              {% set was_stable = states(helper_temp_stable_since) not in ['unknown', 'unavailable', '', None] %}
              {{ temp_diff <= stability_tolerance and not was_stable }}
        sequence:
          # Temperature just became stable - record the time
          - service: input_datetime.set_datetime
            target:
              entity_id: "{{ helper_temp_stable_since }}"
            data:
              datetime: "{{ now() }}"
      
      - conditions:
          - condition: template
            value_template: >
              {% set temp_diff = (current_temp - previous_temp) | abs %}
              {{ temp_diff > stability_tolerance }}
        sequence:
          # Temperature is no longer stable - clear the timestamp
          - service: input_datetime.set_datetime
            target:
              entity_id: "{{ helper_temp_stable_since }}"
            data:
              datetime: "1970-01-01 00:00:00"
  
  # Exit immediately if windows are open (unless disabled)
  - condition: template
    value_template: "{{ not window_open or not enable_window_detection }}"
  
  - variables:
      should_deescalate: >
        {% if not dynamic_enabled %}
          false
        {% elif distance_from_target <= deescalation_threshold and calculated_trend != 'stable' %}
          {% if current_temp > comfort_max_temp and calculated_trend == 'falling' %}
            true
          {% elif current_temp < comfort_min_temp and calculated_trend == 'rising' %}
            true
          {% else %}
            false
          {% endif %}
        {% else %}
          false
        {% endif %}
  
  # Debug: Log current conditions
  - if:
      - condition: template
        value_template: "{{ debug_enabled }}"
    then:
      - service: system_log.write
        data:
          message: >
            üìä Climate System Status
            
            üå°Ô∏è Temperature: {{ current_temp }}¬∞C {% if calculated_trend == 'rising' %}‚ÜóÔ∏è Rising{% elif calculated_trend == 'falling' %}‚ÜòÔ∏è Falling{% else %}‚û°Ô∏è Stable{% endif %}
            üè† People: {{ 'Someone home' if anyone_home else 'Nobody home' }}{% if approaching_home %} (approaching){% endif %}
            ‚öôÔ∏è Current Mode: {{ last_mode|title }} (running {{ time_since_change | round(0) }} min)
            üéõÔ∏è Control Mode: {{ control_mode }} (from: {{ control_mode_helper if control_mode_helper else 'NO HELPER' }})
            
            {% if temp_stability_enabled and temp_stability_detected and last_mode not in ['stability_off', 'stability_eco'] %}üéØ Status: Temperature stable for {{ temp_stability_time | round(0) }} min - ready for auto-off{% elif last_mode in ['stability_off', 'stability_eco'] %}üí§ Status: AC off due to temperature stability{% elif current_temp < comfort_min_temp %}ü•∂ Status: Too cold - needs heating{% elif current_temp > comfort_max_temp %}ü•µ Status: Too hot - needs cooling{% else %}‚úÖ Status: Perfect temperature{% endif %}
            
            üìã Technical Details:
            ‚Ä¢ Comfort Zone: {{ comfort_min_temp }}-{{ comfort_max_temp }}¬∞C
            ‚Ä¢ Cooling Triggers: {{ cooling_medium_temp }}¬∞C (medium), {{ cooling_high_temp }}¬∞C (high)
            ‚Ä¢ Heating Triggers: {{ heating_medium_temp }}¬∞C (medium), {{ heating_low_temp }}¬∞C (low)
            {% if temp_stability_enabled %}‚Ä¢ Stability: {{ 'ACTIVE - AC OFF' if last_mode in ['stability_off', 'stability_eco'] else 'DETECTED' if temp_stability_detected else 'Monitoring' }} (¬±{{ stability_tolerance }}¬∞C for {{ stability_duration }}min){% endif %}
            ‚Ä¢ Trend: {{ temp_change_rate }}¬∞C/min, Distance: {{ distance_from_target }}¬∞C, Effectiveness: {{ current_effectiveness }}%
          level: warning
          logger: blueprints.climate_control
  
  # Update temperature history and trend tracking
  - condition: template
    value_template: "{{ dynamic_enabled and helper_temp_history not in [none, '', 'unavailable', 'unknown'] }}"
  - service: input_number.set_value
    target:
      entity_id: "{{ helper_temp_history }}"
    data:
      value: "{{ current_temp }}"
  
  - condition: template
    value_template: "{{ dynamic_enabled and helper_trend not in [none, '', 'unavailable', 'unknown'] }}"  
  - service: input_text.set_value
    target:
      entity_id: "{{ helper_trend }}"
    data:
      value: "{{ calculated_trend }}"

  # Debug: Log the actual last_mode value to see what's happening
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        üîç DEBUG: Checking stability reset conditions
        ‚Ä¢ last_mode value: "{{ last_mode }}"
        ‚Ä¢ last_mode in list: {{ last_mode in ['stability_off', 'stability_eco'] }}
        ‚Ä¢ temp check: {{ current_temp < comfort_min_temp or current_temp > comfort_max_temp }}
        ‚Ä¢ current_temp: {{ current_temp }}¬∞C
        ‚Ä¢ comfort_min: {{ comfort_min_temp }}¬∞C
        ‚Ä¢ comfort_max: {{ comfort_max_temp }}¬∞C
      level: warning
      logger: blueprints.climate_control

  - choose:
      # CRITICAL: Clear stability mode when temperature exits comfort zone
      # This MUST be the FIRST condition to prevent getting stuck
      - conditions:
          - condition: template
            value_template: "{{ last_mode in ['stability_off', 'stability_eco'] }}"
          - condition: template
            value_template: "{{ current_temp < comfort_min_temp or current_temp > comfort_max_temp }}"
        sequence:
          # Always log this critical reset
          - service: system_log.write
            data:
              message: >
                üîÑ Stability Mode Reset: Temperature outside comfort zone!
                ‚Ä¢ Current: {{ current_temp }}¬∞C
                ‚Ä¢ Comfort Zone: {{ comfort_min_temp }}-{{ comfort_max_temp }}¬∞C
                ‚Ä¢ Was in mode: {{ last_mode }}
                ‚Ä¢ Clearing stability mode to allow normal operation
              level: warning
              logger: blueprints.climate_control
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "off"
          
          # Clear the stability timestamp to reset the feature
          - condition: template
            value_template: "{{ helper_temp_stable_since not in [none, '', 'unavailable', 'unknown'] }}"
          - service: input_datetime.set_datetime
            target:
              entity_id: "{{ helper_temp_stable_since }}"
            data:
              datetime: "1970-01-01 00:00:00"

      # Pre-conditioning when approaching
      - conditions:
          - condition: template
            value_template: "{{ enable_pre_conditioning }}"
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ approaching_home }}"
          - condition: template
            value_template: "{{ current_temp > cooling_medium_temp or current_temp < heating_medium_temp }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: Pre-conditioning activated
                Reason: Approaching home
                {% if proximity_sensor %}Distance: {{ states(proximity_sensor) }}m{% endif %}
                Temperature: {{ current_temp }}¬∞C needs adjustment
              level: warning
              logger: blueprints.climate_control
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ weather_adjusted_target }}"

          - service: system_log.write
            data:
              message: >
                üå°Ô∏è TEMP SET: Pre-conditioning
                Set AC to: {{ weather_adjusted_target | round(0) }}¬∞C (rounded for AC compatibility)
                Actual value: {{ weather_adjusted_target | round(1) }}¬∞C
                Reason: Pre-conditioning target temperature (approaching home)
                Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ weather_adjusted_target | round(1) }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_fan_mode
            target:
              entity_id: !input climate_entities
            data:
              fan_mode: >
                {% set available_fans = state_attr(climate_list[0], 'fan_modes') | list %}
                {% set desired_medium_fan = fan_speed_medium %}
                {% if desired_medium_fan in available_fans %}
                  {{ desired_medium_fan }}
                {% elif 'Level 3' in available_fans %}
                  Level 3
                {% elif '3' in available_fans %}
                  3
                {% elif 'medium' in available_fans %}
                  medium
                {% elif 'Auto' in available_fans %}
                  Auto
                {% elif 'auto' in available_fans %}
                  auto
                {% else %}
                  {{ available_fans[-1] if available_fans else 'Auto' }}
                {% endif %}
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Pre-conditioning"
              message: >
                Pre-conditioning started - approaching home.
                Current: {{ current_temp }}¬∞C
      
      # Temperature Stability Auto-Off (Auto/Smart Mode - temperature equilibrium reached)
      - conditions:
          - condition: template
            value_template: "{{ temp_stability_enabled }}"
          - condition: template
            value_template: "{{ control_mode in ['Smart', 'Auto'] }}"
          - condition: template
            value_template: "{{ temp_stability_detected }}"
          - condition: template
            value_template: "{{ last_mode not in ['off', 'stability_off', 'stability_eco', 'unavailable', 'unknown', none] }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üéØ Smart Feature: Temperature Stability Detected
                üå°Ô∏è Temperature has been steady at {{ current_temp | round(1) }}¬∞C for {{ time_in_current_mode | round(0) }} minutes
                üí° AC job appears complete - switching to {{ stability_behavior|upper }} mode to save energy
                
                üìã Technical: ¬±{{ stability_tolerance }}¬∞C tolerance, {{ stability_duration }}min requirement, {{ time_since_change | round(1) }}min since last change
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ stability_behavior == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities

                  - service: system_log.write
                    data:
                      message: >
                        üå°Ô∏è TEMP SET: Temperature Stability Auto-Off
                        Set AC to: OFF
                        Actual value: OFF
                        Reason: Temperature equilibrium reached - AC job complete
                        Stable at: {{ current_temp | round(1) }}¬∞C for {{ time_in_current_mode | round(0) }} minutes
                      level: warning
                      logger: blueprints.climate_control
              
              - conditions:
                  - condition: template
                    value_template: "{{ stability_behavior == 'eco' }}"
                sequence:
                  # Set HVAC mode with compatibility check for eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if current_temp > comfort_max_temp %}
                                {% if 'cool' in available_modes %}
                                  cool
                                {% elif 'auto' in available_modes %}
                                  auto
                                {% elif 'heat_cool' in available_modes %}
                                  heat_cool
                                {% else %}
                                  {{ available_modes[0] if available_modes else 'off' }}
                                {% endif %}
                              {% elif current_temp < comfort_min_temp %}
                                {% if 'heat' in available_modes %}
                                  heat
                                {% elif 'auto' in available_modes %}
                                  auto
                                {% elif 'heat_cool' in available_modes %}
                                  heat_cool
                                {% else %}
                                  {{ available_modes[0] if available_modes else 'off' }}
                                {% endif %}
                              {% else %}
                                {% if 'auto' in available_modes %}
                                  auto
                                {% elif 'heat_cool' in available_modes %}
                                  heat_cool
                                {% else %}
                                  {{ available_modes[0] if available_modes else 'off' }}
                                {% endif %}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ comfort_max_temp + 1 }}
                        {% elif current_temp < comfort_min_temp %}
                          {{ comfort_min_temp - 1 }}
                        {% else %}
                          {{ target_temp }}
                        {% endif %}

                  - service: system_log.write
                    data:
                      message: >
                        üå°Ô∏è TEMP SET: Temperature Stability Eco Mode
                        Set AC to: {{ ((comfort_max_temp + 1) if current_temp > comfort_max_temp else (comfort_min_temp - 1) if current_temp < comfort_min_temp else target_temp) | round(0) }}¬∞C (rounded for AC compatibility)
                        Actual value: {{ ((comfort_max_temp + 1) if current_temp > comfort_max_temp else (comfort_min_temp - 1) if current_temp < comfort_min_temp else target_temp) | round(1) }}¬∞C
                        Reason: Temperature stability eco mode (gentle maintenance after equilibrium)
                        Current: {{ current_temp | round(1) }}¬∞C ‚Üí Stable for {{ time_in_current_mode | round(0) }} minutes
                      level: warning
                      logger: blueprints.climate_control
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "stability_{{ stability_behavior }}"
          
          - condition: template
            value_template: "{{ notification_service is defined and notification_service not in [none, ''] }}"
          - service: "{{ notification_service }}"
            data:
              title: "Climate Control"
              message: "Temperature Stability: {{ stability_behavior }} (stable {{ time_in_current_mode | round(0) }}min, {{ current_temp }}¬∞C)"

      
      # Adaptive Control Mode - Auto-switch modes based on room occupancy
      - conditions:
          - condition: template
            value_template: "{{ adaptive_enabled }}"
          # Manual Override Protection
          - condition: template
            value_template: >
              {% if adaptive_override_helper and adaptive_override_helper not in ['', 'unknown', 'unavailable'] %}
                {{ not is_state(adaptive_override_helper, 'on') }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: >
              {% if adaptive_override_timeout > 0 %}
                {% set last_change = states(helper_change) %}
                {% if last_change not in ['unknown', 'unavailable', ''] %}
                  {% set time_since_change = (as_timestamp(now()) - as_timestamp(last_change)) / 3600 %}
                  {{ time_since_change >= adaptive_override_timeout }}
                {% else %}
                  true
                {% endif %}
              {% else %}
                true
              {% endif %}
        sequence:
          # Debug logging for Adaptive Control evaluation
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç Adaptive Control: Evaluating conditions...
                ‚Ä¢ Enabled: {{ adaptive_enabled }}
                ‚Ä¢ Current Mode: {{ control_mode }}
                ‚Ä¢ Room Presence: {{ room_presence_detected }}
                ‚Ä¢ Last Presence: {{ states(presence_detected_helper) if presence_detected_helper else 'N/A' }}
                ‚Ä¢ Occupied Delay: {{ adaptive_occupied_delay }} min
                ‚Ä¢ Vacant Delay: {{ adaptive_vacant_delay }} min
                ‚Ä¢ Target Mode: {{ adaptive_target_mode | title }}
                {% if presence_detected_helper and states(presence_detected_helper) not in ['unknown', 'unavailable', ''] %}
                {% set presence_time = (as_timestamp(now()) - as_timestamp(states(presence_detected_helper))) / 60 %}
                ‚Ä¢ Time Since Last Presence: {{ presence_time | round(1) }} min
                {% endif %}
              level: debug
              logger: blueprints.climate_control
          
          # Main condition evaluation and action logic
          - condition: or
            conditions:
              # Switch to Auto/Smart when room occupied for configured time
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ control_mode == 'Manual' }}"
                  - condition: template
                    value_template: "{{ room_presence_detected }}"
                  - condition: template
                    value_template: >
                      {% set last_presence = states(presence_detected_helper) %}
                      {% if last_presence not in ['unknown', 'unavailable', ''] %}
                        {% set presence_time = as_timestamp(now()) - as_timestamp(last_presence) %}
                        {{ (presence_time / 60) >= adaptive_occupied_delay }}
                      {% else %}
                        false
                      {% endif %}
              # Switch to Manual + AC off when room vacant for configured time
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ control_mode in ['Auto', 'Smart'] }}"
                  - condition: template
                    value_template: "{{ not room_presence_detected }}"
                  - condition: template
                    value_template: >
                      {% set last_presence = states(presence_detected_helper) %}
                      {% if last_presence not in ['unknown', 'unavailable', ''] %}
                        {% set vacant_time = as_timestamp(now()) - as_timestamp(last_presence) %}
                        {{ (vacant_time / 60) >= adaptive_vacant_delay }}
                      {% else %}
                        false
                      {% endif %}
        
          
          # Execute actions when conditions are met
          # Handle occupied room - switch to Auto/Smart mode
          - choose:
            - conditions:
                - condition: template
                  value_template: "{{ control_mode == 'Manual' and room_presence_detected }}"
              sequence:
                - condition: template
                  value_template: "{{ debug_enabled }}"
                - service: system_log.write
                  data:
                    message: >
                      ‚úÖ Adaptive Control: OCCUPIED ‚Üí SWITCHING TO {{ adaptive_target_mode | title }} MODE
                      ‚Ä¢ Current Mode: {{ control_mode }} ‚Üí {{ adaptive_target_mode | title }}
                      ‚Ä¢ Room Presence: {{ room_presence_detected }}
                      ‚Ä¢ Required Delay: {{ adaptive_occupied_delay }} min
                      {% set last_presence = states(presence_detected_helper) %}
                      {% if last_presence not in ['unknown', 'unavailable', ''] %}
                      {% set presence_time = (as_timestamp(now()) - as_timestamp(last_presence)) / 60 %}
                      ‚Ä¢ Actual Presence Time: {{ presence_time | round(1) }} min ({{ presence_time | round(1) - adaptive_occupied_delay | round(1) }}min over threshold)
                      ‚Ä¢ Last Presence Detected: {{ as_timestamp(last_presence) | timestamp_custom('%H:%M:%S') }}
                      {% endif %}
                      ‚Ä¢ Action: Switching control mode helper to {{ adaptive_target_mode | title }}
                    level: info
                    logger: blueprints.climate_control
                
                - service: input_select.select_option
                  target:
                    entity_id: "{{ control_mode_helper }}"
                  data:
                    option: "{{ adaptive_target_mode | title }}"
                
                # Debug completion log
                - condition: template
                  value_template: "{{ debug_enabled }}"
                - service: system_log.write
                  data:
                    message: "‚úÖ Adaptive Control: OCCUPIED actions completed - control mode switched to {{ adaptive_target_mode | title }}"
                    level: debug
                    logger: blueprints.climate_control
                
                - condition: template
                  value_template: "{{ notification_service is defined and notification_service not in [none, ''] }}"
                - service: "{{ notification_service }}"
                  data:
                    title: "Adaptive Climate Control"
                    message: "Room occupied - switched to {{ adaptive_target_mode | title }} mode"
            
            # Handle vacant room - switch to Manual mode and turn AC off
            - conditions:
                - condition: template
                  value_template: "{{ control_mode in ['Auto', 'Smart'] and not room_presence_detected }}"
              sequence:
                - condition: template
                  value_template: "{{ debug_enabled }}"
                - service: system_log.write
                  data:
                    message: >
                      üî¥ Adaptive Control: VACANT ‚Üí SWITCHING TO MANUAL & TURNING AC OFF
                      ‚Ä¢ Current Mode: {{ control_mode }} ‚Üí Manual
                      ‚Ä¢ Room Presence: {{ room_presence_detected }}
                      ‚Ä¢ Required Delay: {{ adaptive_vacant_delay }} min
                      {% set last_presence = states(presence_detected_helper) %}
                      {% if last_presence not in ['unknown', 'unavailable', ''] %}
                      {% set vacant_time = (as_timestamp(now()) - as_timestamp(last_presence)) / 60 %}
                      ‚Ä¢ Actual Vacant Time: {{ vacant_time | round(1) }} min ({{ vacant_time | round(1) - adaptive_vacant_delay | round(1) }}min over threshold)
                      ‚Ä¢ Last Presence Detected: {{ as_timestamp(last_presence) | timestamp_custom('%H:%M:%S') }}
                      {% endif %}
                      ‚Ä¢ Actions: 1) Switch to Manual mode 2) Turn off {{ climate_list | length }} climate entities
                    level: info
                    logger: blueprints.climate_control
                
                - service: input_select.select_option
                  target:
                    entity_id: "{{ control_mode_helper }}"
                  data:
                    option: "Manual"
                
                # Turn off all climate entities
                - repeat:
                    for_each: "{{ climate_list }}"
                    sequence:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                      - service: system_log.write
                        data:
                          message: "üî¥ Adaptive Control: Turning off climate entity {{ repeat.item }} ({{ loop.index }}/{{ climate_list | length }})"
                          level: debug
                          logger: blueprints.climate_control
                      
                      - service: climate.turn_off
                        target:
                          entity_id: "{{ repeat.item }}"
                
                # Update last mode helper to prevent conflicts
                - service: input_text.set_value
                  target:
                    entity_id: "{{ helper_mode }}"
                  data:
                    value: "adaptive_off"
                
                # Debug completion log
                - condition: template
                  value_template: "{{ debug_enabled }}"
                - service: system_log.write
                  data:
                    message: "‚úÖ Adaptive Control: VACANT actions completed - mode set to Manual, all {{ climate_list | length }} climate entities turned off, helper set to adaptive_off"
                    level: debug
                    logger: blueprints.climate_control
                
                - condition: template
                  value_template: "{{ notification_service is defined and notification_service not in [none, ''] }}"
                - service: "{{ notification_service }}"
                  data:
                    title: "Adaptive Climate Control"
                    message: "Room vacant - switched to Manual mode and turned AC off"

      # Adaptive Control Debug - Log when enabled but conditions not met
      - conditions:
          - condition: template
            value_template: "{{ adaptive_enabled and debug_enabled }}"
          - condition: not
            conditions:
              - condition: or
                conditions:
                  # Check if occupied conditions would be met
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ control_mode == 'Manual' }}"
                      - condition: template
                        value_template: "{{ room_presence_detected }}"
                      - condition: template
                        value_template: >
                          {% set last_presence = states(presence_detected_helper) %}
                          {% if last_presence not in ['unknown', 'unavailable', ''] %}
                            {% set presence_time = as_timestamp(now()) - as_timestamp(last_presence) %}
                            {{ (presence_time / 60) >= adaptive_occupied_delay }}
                          {% else %}
                            false
                          {% endif %}
                  # Check if vacant conditions would be met
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ control_mode in ['Auto', 'Smart'] }}"
                      - condition: template
                        value_template: "{{ not room_presence_detected }}"
                      - condition: template
                        value_template: >
                          {% set last_presence = states(presence_detected_helper) %}
                          {% if last_presence not in ['unknown', 'unavailable', ''] %}
                            {% set vacant_time = as_timestamp(now()) - as_timestamp(last_presence) %}
                            {{ (vacant_time / 60) >= adaptive_vacant_delay }}
                          {% else %}
                            false
                          {% endif %}
        sequence:
          - service: system_log.write
            data:
              message: >
                ‚è≥ Adaptive Control: Conditions not met
                {% set last_presence = states(presence_detected_helper) %}
                {% if last_presence not in ['unknown', 'unavailable', ''] %}
                {% set time_diff = (as_timestamp(now()) - as_timestamp(last_presence)) / 60 %}
                {% if control_mode == 'Manual' and room_presence_detected %}
                ‚Ä¢ OCCUPIED scenario: Need {{ adaptive_occupied_delay }}min, have {{ time_diff | round(1) }}min ({{ (adaptive_occupied_delay - time_diff) | round(1) }}min remaining)
                {% elif control_mode in ['Auto', 'Smart'] and not room_presence_detected %}
                ‚Ä¢ VACANT scenario: Need {{ adaptive_vacant_delay }}min, have {{ time_diff | round(1) }}min ({{ (adaptive_vacant_delay - time_diff) | round(1) }}min remaining)
                {% else %}
                ‚Ä¢ Mode: {{ control_mode }}, Presence: {{ room_presence_detected }}, Time: {{ time_diff | round(1) }}min - No matching scenario
                {% endif %}
                {% else %}
                ‚Ä¢ No valid presence timestamp available from helper: {{ presence_detected_helper }}
                {% endif %}
              level: debug
              logger: blueprints.climate_control

      # Manual Mode - Immediately clear automation states when detected
      - conditions:
          - condition: template
            value_template: "{{ control_mode == 'Manual' }}"
          - condition: template
            value_template: "{{ last_mode in ['stability_off', 'stability_eco', 'smart_off', 'smart_eco', 'smart_maintain', 'adaptive_off', 'eco', 'cooling', 'heating'] }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üéÆ Manual Mode: IMMEDIATE Control Restored
                üîÑ Clearing "{{ last_mode }}" state instantly
                üí° You now have full manual control - no automation interference
                
                üìã Technical: Manual mode = instant automation disable
              level: warning
              logger: blueprints.climate_control

          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "manual"
              
          # Turn off AC when switching to Manual mode from automation-controlled state
          - service: climate.turn_off
            target:
              entity_id: !input climate_entities

      # Smart Mode room absence (room empty but still home)
      - conditions:
          - condition: template
            value_template: "{{ control_mode == 'Smart' }}"
          - condition: template
            value_template: "{{ not room_presence_detected }}"
          - condition: template
            value_template: "{{ minutes_since_presence >= presence_timeout }}"
          - condition: template
            value_template: "{{ proximity_zone == 'home' or anyone_home }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üö™ Smart Mode: Room Empty
                üí° Nobody detected in room for {{ minutes_since_presence | round(0) }} minutes
                üè† You're still home, so switching to {{ smart_behavior|upper }} mode to save energy
                
                üìã Technical: {{ time_since_change | round(1) }}min since last change
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ smart_behavior == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities
              
              - conditions:
                  - condition: template
                    value_template: "{{ smart_behavior == 'eco' }}"
                sequence:
                  # Set HVAC mode with auto preference and fallback for room eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                                cool
                              {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                                heat
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ comfort_max_temp + eco_offset }}
                        {% elif current_temp < comfort_min_temp %}
                          {{ comfort_min_temp - eco_offset }}
                        {% else %}
                          {{ target_temp }}
                        {% endif %}

                  - service: system_log.write
                    data:
                      message: >
                        üå°Ô∏è TEMP SET: Smart Room Eco Mode
                        Set AC to: {{ ((comfort_max_temp + eco_offset) if current_temp > comfort_max_temp else (comfort_min_temp - eco_offset) if current_temp < comfort_min_temp else target_temp) | round(0) }}¬∞C (rounded for AC compatibility)
                        Actual value: {{ ((comfort_max_temp + eco_offset) if current_temp > comfort_max_temp else (comfort_min_temp - eco_offset) if current_temp < comfort_min_temp else target_temp) | round(1) }}¬∞C
                        Reason: {{ 'Eco cooling (comfort max +' + eco_offset|string + '¬∞C)' if current_temp > comfort_max_temp else 'Eco heating (comfort min -' + eco_offset|string + '¬∞C)' if current_temp < comfort_min_temp else 'Direct target (within comfort zone)' }}
                        Current: {{ current_temp | round(1) }}¬∞C ‚Üí Comfort range: {{ comfort_min_temp | round(1) }}-{{ comfort_max_temp | round(1) }}¬∞C
                      level: warning
                      logger: blueprints.climate_control
              
              - conditions:
                  - condition: template
                    value_template: "{{ smart_behavior == 'maintain' }}"
                sequence:
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: "{{ target_temp }}"

                  - service: system_log.write
                    data:
                      message: >
                        üå°Ô∏è TEMP SET: Smart Room Maintain
                        Set AC to: {{ target_temp | round(0) }}¬∞C (rounded for AC compatibility)
                        Actual value: {{ target_temp | round(1) }}¬∞C
                        Reason: Smart mode maintain current temperature (room empty but still home)
                        Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ target_temp | round(1) }}¬∞C
                      level: warning
                      logger: blueprints.climate_control
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "smart_{{ smart_behavior }}"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "Smart Mode: {{ smart_behavior }} (room empty {{ minutes_since_presence | round(0) }}min, {{ current_temp }}¬∞C)"

      # Away mode (Global - nobody home)
      - conditions:
          - condition: template
            value_template: "{{ enable_away_mode }}"
          - condition: template
            value_template: "{{ not should_activate }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: Away mode activated
                Action: {{ away_action }}
                Nobody home detected
                Time since last change: {{ time_since_change | round(1) }} min
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ away_action == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities
              
              - conditions:
                  - condition: template
                    value_template: "{{ away_action == 'eco' }}"
                sequence:
                  # Set HVAC mode with auto preference and fallback for away eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                                cool
                              {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                                heat
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ cooling_target_temp + eco_mode_setpoint_offset }}
                        {% else %}
                          {{ heating_target_temp - eco_mode_setpoint_offset }}
                        {% endif %}

                  - service: system_log.write
                    data:
                      message: >
                        üå°Ô∏è TEMP SET: Away Eco Mode
                        Set AC to: {{ ((cooling_target_temp + eco_mode_setpoint_offset) if current_temp > comfort_max_temp else (heating_target_temp - eco_mode_setpoint_offset)) | round(0) }}¬∞C (rounded for AC compatibility)
                        Actual value: {{ ((cooling_target_temp + eco_mode_setpoint_offset) if current_temp > comfort_max_temp else (heating_target_temp - eco_mode_setpoint_offset)) | round(1) }}¬∞C
                        Reason: {{ 'Eco cooling (target +' + eco_mode_setpoint_offset|string + '¬∞C offset)' if current_temp > comfort_max_temp else 'Eco heating (target -' + eco_mode_setpoint_offset|string + '¬∞C offset)' }}
                        Current: {{ current_temp | round(1) }}¬∞C ‚Üí Comfort range: {{ comfort_min_temp | round(1) }}-{{ comfort_max_temp | round(1) }}¬∞C
                      level: warning
                      logger: blueprints.climate_control
                  
                  # Set auto fan mode for efficient away eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                        - service: climate.set_fan_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            fan_mode: >
                              {% if 'Auto' in available_fans %}
                                Auto
                              {% elif 'auto' in available_fans %}
                                auto
                              {% elif 'low' in available_fans %}
                                low
                              {% elif 'Quiet' in available_fans %}
                                Quiet
                              {% elif 'Silence' in available_fans %}
                                Silence
                              {% elif 'Level 1' in available_fans %}
                                Level 1
                              {% elif '1' in available_fans %}
                                1
                              {% else %}
                                {{ available_fans[0] if available_fans else 'Auto' }}
                              {% endif %}
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Away Mode"
              message: "{{ away_action | title }} mode activated - nobody home"
      
      # High cooling mode (with hysteresis)
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: >
              {% if last_transition == 'heating' %}
                {{ current_temp >= (cooling_high_temp + hysteresis_tolerance) }}
              {% else %}
                {{ current_temp >= cooling_high_temp }}
              {% endif %}
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'cooling' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: HIGH COOLING MODE
                Temperature: {{ current_temp }}¬∞C > {{ cooling_high_temp }}¬∞C
                Target: {{ cooling_target_temp }}¬∞C
                Fan: Maximum
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode with auto preference and fallback
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'cool' in available_modes %}
                        cool
                      {% elif 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if gradual_enabled %}
                  {{ [weather_adjusted_target, current_temp - 2] | min }}
                {% else %}
                  {{ weather_adjusted_target }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                üå°Ô∏è TEMP SET: High Cooling
                Set AC to: {{ ([weather_adjusted_target, current_temp - 2] | min if gradual_enabled else weather_adjusted_target) | round(0) }}¬∞C (rounded for AC compatibility)
                Actual value: {{ ([weather_adjusted_target, current_temp - 2] | min if gradual_enabled else weather_adjusted_target) | round(1) }}¬∞C
                Reason: {{ 'Gradual adjustment (target ' + weather_adjusted_target|string + '¬∞C, current-2¬∞C = ' + (current_temp-2)|round(1)|string + '¬∞C, chose minimum)' if gradual_enabled else 'Direct target temperature' }}
                Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ weather_adjusted_target | round(1) }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          # Update hysteresis tracking - we're now cooling
          - condition: template
            value_template: "{{ helper_last_transition not in [none, '', 'unavailable', 'unknown'] }}"
          - service: input_text.set_value
            target:
              entity_id: "{{ helper_last_transition }}"
            data:
              value: "cooling"
          
          # Set fan mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "cooling"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "High cooling mode - {{ current_temp }}¬∞C"
      
      # Medium cooling mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp >= cooling_medium_temp and current_temp < cooling_high_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'cooling' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: MEDIUM COOLING MODE
                Temperature: {{ current_temp }}¬∞C ({{ cooling_medium_temp }}-{{ cooling_high_temp }}¬∞C range)
                Target: {{ cooling_target_temp }}¬∞C
                Fan: Auto/Medium (efficient)
                
                MANUAL MODE DEBUG:
                Control Mode: {{ control_mode }}
                Should Activate: {{ should_activate }}
                Extreme Temp Detected: {{ extreme_temp_detected }}
                Room Presence: {{ room_presence_detected }}
                Approaching Home: {{ approaching_home }}
                Extreme High Threshold: {{ extreme_high }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode to auto for efficient medium cooling
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% elif 'cool' in available_modes %}
                        cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if gradual_enabled %}
                  {{ [cooling_target_temp, current_temp - 1] | min }}
                {% else %}
                  {{ cooling_target_temp }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                üå°Ô∏è TEMP SET: Medium Cooling
                Set AC to: {{ ([cooling_target_temp, current_temp - 1] | min if gradual_enabled else cooling_target_temp) | round(0) }}¬∞C (rounded for AC compatibility)
                Actual value: {{ ([cooling_target_temp, current_temp - 1] | min if gradual_enabled else cooling_target_temp) | round(1) }}¬∞C
                Reason: {{ 'Gradual adjustment (target ' + cooling_target_temp|string + '¬∞C, current-1¬∞C = ' + (current_temp-1)|round(1)|string + '¬∞C, chose minimum)' if gradual_enabled else 'Direct target temperature' }}
                Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ cooling_target_temp | round(1) }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          # Set auto/medium fan mode for efficient cooling
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% elif 'medium' in available_fans %}
                        medium
                      {% elif 'Level 3' in available_fans %}
                        Level 3
                      {% elif '3' in available_fans %}
                        3
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "cooling"
      
      # Low heating mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp <= heating_low_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'heating' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: HIGH HEATING MODE
                Temperature: {{ current_temp }}¬∞C < {{ heating_low_temp }}¬∞C
                Target: {{ heating_target_temp }}¬∞C
                Fan: Maximum
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ heating_target_temp }}"

          - service: system_log.write
            data:
              message: >
                üå°Ô∏è TEMP SET: High Heating
                Set AC to: {{ heating_target_temp | round(0) }}¬∞C (rounded for AC compatibility)
                Actual value: {{ heating_target_temp | round(1) }}¬∞C
                Reason: Direct target temperature (no gradual adjustment for heating)
                Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ heating_target_temp | round(1) }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          # Set max fan mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "heating"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "High heating mode - {{ current_temp }}¬∞C"
      
      # Medium heating mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp <= heating_medium_temp and current_temp > heating_low_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'heating' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: MEDIUM HEATING MODE
                Temperature: {{ current_temp }}¬∞C ({{ heating_low_temp }}-{{ heating_medium_temp }}¬∞C range)
                Target: {{ heating_target_temp }}¬∞C
                Fan: Auto/Medium (efficient)
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode to auto for efficient medium heating
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% elif 'heat' in available_modes %}
                        heat
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ heating_target_temp }}"

          - service: system_log.write
            data:
              message: >
                üå°Ô∏è TEMP SET: Medium Heating
                Set AC to: {{ heating_target_temp | round(0) }}¬∞C (rounded for AC compatibility)
                Actual value: {{ heating_target_temp | round(1) }}¬∞C
                Reason: Direct target temperature (no gradual adjustment for heating)
                Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ heating_target_temp | round(1) }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          # Set auto/medium fan mode for efficient heating
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% elif 'medium' in available_fans %}
                        medium
                      {% elif 'Level 3' in available_fans %}
                        Level 3
                      {% elif '3' in available_fans %}
                        3
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "heating"
      
      # Comfort zone - Eco mode or OFF mode (Power Saving)
      # When temperature is within acceptable range (e.g., 21-25¬∞C with ¬±2¬∞C tolerance)
      # OFF mode saves 40-60% more energy vs eco mode but allows temperature drift
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp >= comfort_min_temp and current_temp <= comfort_max_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üîç CLIMATE DEBUG: Comfort Zone Action Triggered
                Control Mode: {{ control_mode }}
                Should Activate: {{ should_activate }}
                Extreme Temp Detected: {{ extreme_temp_detected }}
                Current Temp: {{ current_temp }}¬∞C
                Extreme High: {{ extreme_high }}¬∞C
                Extreme Low: {{ extreme_low }}¬∞C
                Room Presence: {{ room_presence_detected }}
                Approaching Home: {{ approaching_home }}
              level: warning
              logger: blueprints.climate_control
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ eco_enabled }}"
                sequence:
                  # Eco mode - maintain with reduced fan and wider setpoint (uses ~150-250W)
                  # Set HVAC mode to auto for maximum efficiency in comfort zone
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: "{{ target_temp }}"

                  - service: system_log.write
                    data:
                      message: >
                        üå°Ô∏è TEMP SET: Comfort Zone Maintenance
                        Set AC to: {{ target_temp | round(0) }}¬∞C (rounded for AC compatibility)
                        Actual value: {{ target_temp | round(1) }}¬∞C
                        Reason: Maintaining target temperature within comfort zone
                        Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ target_temp | round(1) }}¬∞C
                      level: warning
                      logger: blueprints.climate_control
                  
                  # Set auto fan mode for maximum efficiency in comfort zone
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                        - service: climate.set_fan_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            fan_mode: >
                              {% if 'Auto' in available_fans %}
                                Auto
                              {% elif 'auto' in available_fans %}
                                auto
                              {% elif 'low' in available_fans %}
                                low
                              {% elif 'Quiet' in available_fans %}
                                Quiet
                              {% elif 'Silence' in available_fans %}
                                Silence
                              {% elif 'Level 1' in available_fans %}
                                Level 1
                              {% elif '1' in available_fans %}
                                1
                              {% else %}
                                {{ available_fans[0] if available_fans else 'Auto' }}
                              {% endif %}
                  
                  # Set swing mode with compatibility check for eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                            desired_swing: !input swing_mode_active
                        - service: climate.set_swing_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            swing_mode: >
                              {% if desired_swing in available_swings %}
                                {{ desired_swing }}
                              {% elif desired_swing == 'both' and '3D' in available_swings %}
                                3D
                              {% elif desired_swing == 'both' and 'Both' in available_swings %}
                                Both
                              {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                                Vertical
                              {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                                vertical
                              {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                                Horizontal
                              {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                                horizontal
                              {% elif 'both' in available_swings %}
                                both
                              {% elif 'Both' in available_swings %}
                                Both
                              {% elif '3D' in available_swings %}
                                3D
                              {% elif 'Vertical' in available_swings %}
                                Vertical
                              {% elif 'vertical' in available_swings %}
                                vertical
                              {% else %}
                                {{ available_swings[0] if available_swings else 'Off' }}
                              {% endif %}
                  
                  - service: input_text.set_value
                    target:
                      entity_id: !input helper_last_mode
                    data:
                      value: "eco"
                  
                  - condition: template
                    value_template: "{{ enable_notifications }}"
                  
                  - service: !input notification_service
                    data:
                      title: "Climate Control"
                      message: "Eco mode - Comfort zone ({{ current_temp }}¬∞C)"
            
            default:
              # OFF mode - Maximum power savings (0W consumption)
              # A/C turns completely off when temperature is acceptable
              # Will restart when temp exits comfort zone (e.g., <21¬∞C or >25¬∞C)
              - service: climate.turn_off
                target:
                  entity_id: !input climate_entities
              
              - service: input_text.set_value
                target:
                  entity_id: !input helper_last_mode
                data:
                  value: "off"
              
              - condition: template
                value_template: "{{ enable_notifications }}"
              
              - service: !input notification_service
                data:
                  title: "Climate Control"
                  message: "Turned off - Comfort zone ({{ current_temp }}¬∞C)"

      # FALLBACK: Dynamic Escalation - Only if no normal modes triggered
      - conditions:
          - condition: template
            value_template: "{{ should_escalate }}"
          - condition: template
            value_template: "{{ should_activate }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                üî• CLIMATE DEBUG: DYNAMIC ESCALATION ACTIVATED (FALLBACK)
                Reason: {{ 'Temperature rising when cooling' if calculated_trend == 'rising' and current_temp > comfort_max_temp else 
                          'Temperature falling when heating' if calculated_trend == 'falling' and current_temp < comfort_min_temp else
                          'Temperature stalled for ' ~ time_in_current_mode ~ ' minutes' }}
                No normal modes triggered, escalating to maximum power
              level: warning
              logger: blueprints.climate_control
          
          # Force maximum cooling/heating mode
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if current_temp > comfort_max_temp and 'cool' in available_modes %}
                        cool
                      {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                        heat
                      {% elif 'auto' in available_modes %}
                        auto
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if current_temp > comfort_max_temp %}
                  {{ cooling_target_temp }}
                {% elif current_temp < comfort_min_temp %}
                  {{ heating_target_temp }}
                {% else %}
                  {{ target_temp }}
                {% endif %}

          - service: system_log.write
            data:
              message: >
                üå°Ô∏è TEMP SET: Emergency Escalation
                Set AC to: {{ (cooling_target_temp if current_temp > comfort_max_temp else heating_target_temp if current_temp < comfort_min_temp else target_temp) | round(0) }}¬∞C (rounded for AC compatibility)
                Actual value: {{ (cooling_target_temp if current_temp > comfort_max_temp else heating_target_temp if current_temp < comfort_min_temp else target_temp) | round(1) }}¬∞C
                Reason: {{ 'Emergency cooling (trend ineffective)' if current_temp > comfort_max_temp else 'Emergency heating (trend ineffective)' if current_temp < comfort_min_temp else 'Emergency target (stalled temperature)' }}
                Current: {{ current_temp | round(1) }}¬∞C ‚Üí Target: {{ (cooling_target_temp if current_temp > comfort_max_temp else heating_target_temp if current_temp < comfort_min_temp else target_temp) | round(1) }}¬∞C
              level: warning
              logger: blueprints.climate_control
          
          # Set maximum fan speed for escalation
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% elif 'auto' in available_fans %}
                        auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'Auto' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: >
                {% if current_temp > comfort_max_temp %}
                  cooling_escalated
                {% else %}
                  heating_escalated  
                {% endif %}

  # Adaptive Control Status Debug Log  
  - service: system_log.write
    data:
      message: >
        üîç Adaptive Control: Status Check
        ‚Ä¢ Adaptive Enabled: {{ adaptive_enabled }}
        ‚Ä¢ Control Mode: {{ control_mode }}
        ‚Ä¢ Room Presence: {{ room_presence_detected }}
        ‚Ä¢ Last Presence: {{ states(presence_detected_helper) if presence_detected_helper else 'N/A' }}
        ‚Ä¢ Required Delay: {{ adaptive_occupied_delay }} min
        {% if presence_detected_helper and states(presence_detected_helper) not in ['unknown', 'unavailable', ''] %}
        {% set presence_time = (as_timestamp(now()) - as_timestamp(states(presence_detected_helper))) / 60 %}
        ‚Ä¢ Time Present: {{ presence_time | round(1) }} min
        ‚Ä¢ Ready to Switch: {{ presence_time >= adaptive_occupied_delay }}
        {% endif %}
        ‚Ä¢ Override Timeout: {{ adaptive_override_timeout }}h
        {% if adaptive_override_helper and adaptive_override_helper not in ['', 'unknown', 'unavailable'] %}
        ‚Ä¢ Override Helper: {{ states(adaptive_override_helper) }}
        {% endif %}
        {% if adaptive_override_timeout > 0 %}
        {% set last_change = states(helper_change) %}
        {% if last_change not in ['unknown', 'unavailable', ''] %}
        {% set time_since_change = (as_timestamp(now()) - as_timestamp(last_change)) / 3600 %}
        ‚Ä¢ Time Since Change: {{ time_since_change | round(1) }}h
        ‚Ä¢ Override Active: {{ time_since_change < adaptive_override_timeout }}
        {% endif %}
        {% endif %}
      level: warning
      logger: blueprints.climate_control

  # Debug: No conditions matched
  - if:
      - condition: template
        value_template: "{{ debug_enabled }}"
    then:
      - service: system_log.write
        data:
          message: >
            ‚úÖ Climate System: All Good
            {% if current_temp >= comfort_min_temp and current_temp <= comfort_max_temp %}üéØ Temperature {{ current_temp }}¬∞C is perfect - no changes needed{% else %}‚è∏Ô∏è No action required right now{% endif %}
            
            üìã Technical: {{ current_temp }}¬∞C, {{ 'someone home' if anyone_home else 'nobody home' }}, {{ last_mode }} mode
          level: warning
          logger: blueprints.climate_control

mode: restart