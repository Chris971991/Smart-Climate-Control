blueprint:
  name: Ultimate Smart Climate Control - v2.0
  description: >-
    📌 Version: 2.0.0
    
    
    🌡️ INTELLIGENT CLIMATE CONTROL with power-efficient operation, proximity-based 
    pre-conditioning, and presence detection. Control multiple A/C units with full 
    customization of temperatures, distances, and operating modes.
    
    
    🧠 CONTROL MODES EXPLAINED:
    
    • AUTO MODE: Full automation with occupancy detection and presence-based control. 
      System automatically adjusts temperature when you're home or away.
    
    • MANUAL MODE: Full manual control with no automation. 
      You control temperature, fan speed, and on/off manually.
    
    • SMART MODE: Aggressive presence detection and advanced occupancy sensing. 
      Uses motion sensors, door sensors, phone presence, and predictive algorithms 
      to optimize temperature before occupancy and maintain comfort during use.
    
    
    ⚡ KEY FEATURES:
    
    • Smart Mode Control - Auto/Manual/Smart modes with presence timeout
    
    • Room-Specific Presence - BLE/PIR sensors for accurate occupancy
    
    • Proximity Zones - Different behaviors based on distance from home
    
    • Eco Mode - Reduces energy use by 30-40% vs on/off cycling
    
    • Smart Pre-conditioning - Activates when approaching home
    
    • Multi-Zone Support - Control 1 or many A/C units
    
    • Gradual Adjustments - Prevents aggressive cycling
    
    • Runtime Protection - Extends equipment life
    
    
    ⚠️ REQUIRED SETUP - Create unique helpers for EACH room/automation:
    
    
    1️⃣ Input Text Helper (unique per room):
    
    • Living Room: input_text.climate_last_mode_living_room
    
    • Bedroom: input_text.climate_last_mode_bedroom
    
    • Office: input_text.climate_last_mode_office
    
    • Icon: mdi:air-conditioner
    
    
    2️⃣ Input DateTime Helper (unique per room):
    
    • Living Room: input_datetime.climate_last_change_living_room
    
    • Bedroom: input_datetime.climate_last_change_bedroom  
    
    • Office: input_datetime.climate_last_change_office
    
    • Has date: ✅ Yes
    
    • Has time: ✅ Yes
    
    • Icon: mdi:clock-outline
    
    
    🧠 SMART MODE HELPERS (for advanced control):
    
    • input_select.climate_control_mode_[room] (Auto/Manual/Smart modes)
    
    • input_datetime.presence_last_detected_[room] (presence timeout tracking)
    
    • input_boolean.climate_proximity_override_[room] (emergency override)
    
    
    🧠 DYNAMIC ADAPTATION HELPERS (for smart escalation):
    
    • input_number.climate_temp_history_[room] (temperature tracking)
    
    • input_text.climate_trend_direction_[room] (rising/falling/stable)
    
    • input_datetime.climate_mode_start_time_[room] (when current mode started)
    
    • input_number.climate_effectiveness_score_[room] (0-100, how well it's working)
    
    
    📍 Create via: Settings → Devices & Services → Helpers → Create Helper
    
    
    3️⃣ PROXIMITY SENSORS - Set up via Integration:
    
    1. Go to Settings → Devices & Services → Integrations
    2. Click "+ ADD INTEGRATION" 
    3. Search for and select "Proximity"
    4. Configure:
       • Name: "Home"
       • Zone: Select your "Home" zone
       • Devices: Select your person entities
       • Tolerance: 50m (prevents GPS jitter updates)
    
    This creates:
    • sensor.home_nearest_distance (distance in meters)
    • sensor.home_nearest_direction_of_travel (towards/away/stationary/arrived)
    
    
    📊 Optional Energy Tracking:
    
    • input_number.climate_power_saving_score (efficiency %)
    
    • sensor.climate_runtime_today (daily runtime tracking)
    
    • sensor.climate_efficiency_rating (efficiency score)
  domain: automation
  source_url: https://github.com/yourusername/ultimate-climate-control
  input:
    # Basic required settings (always visible)
    climate_entities:
      name: Climate Entities *
      description: Select one or more A/C units to control
      selector:
        entity:
          multiple: true
          domain: climate
    
    helper_last_mode:
      name: Last Mode Helper Entity *
      description: >
        Input Text helper to track last climate mode.
        Create unique helper for each room/automation:
        Examples: input_text.climate_last_mode_living_room,
        input_text.climate_last_mode_bedroom
      selector:
        entity:
          domain: input_text
    
    helper_last_change:
      name: Last Change Helper Entity *
      description: >
        Input DateTime helper to track last change time.
        Create unique helper for each room/automation:
        Examples: input_datetime.climate_last_change_living_room,
        input_datetime.climate_last_change_bedroom
      selector:
        entity:
          domain: input_datetime

    # Temperature Settings
    temperature_settings:
      name: "Temperature Settings"
      icon: mdi:thermometer
      collapsed: true
      input:
        temperature_sensor:
          name: Temperature Sensor (Optional)
          description: >
            External temperature sensor for more accurate readings. 
            If not set, uses the A/C's internal sensor (less accurate).
            Recommended: Use a sensor placed at seated height in the room center.
          default: []
          selector:
            entity:
              domain: sensor
              device_class: temperature
        
        use_average_temperature:
          name: Use Average Temperature
          description: >
            When using multiple A/C units, average all their temperatures.
            Turn OFF if using a single external sensor for all units.
          default: true
          selector:
            boolean:
        
        comfort_min_temp:
          name: Comfort Zone Minimum
          description: Lower bound of comfort zone (eco mode activates)
          default: 21
          selector:
            number:
              min: 18
              max: 25
              step: 0.5
              unit_of_measurement: "°C"
        
        comfort_max_temp:
          name: Comfort Zone Maximum
          description: Upper bound of comfort zone (eco mode activates)
          default: 23
          selector:
            number:
              min: 20
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        cooling_target_temp:
          name: Cooling Target Temperature
          description: Target temperature when cooling
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        heating_target_temp:
          name: Heating Target Temperature
          description: Target temperature when heating
          default: 23
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        precool_target_temp:
          name: Pre-cooling Target Temperature
          description: Target temperature for pre-conditioning
          default: 22
          selector:
            number:
              min: 18
              max: 28
              step: 0.5
              unit_of_measurement: "°C"
        
        cooling_high_temp:
          name: High Cooling Temperature
          description: Temperature above which maximum cooling is applied
          default: 26
          selector:
            number:
              min: 20
              max: 35
              step: 0.5
              unit_of_measurement: "°C"
        
        cooling_medium_temp:
          name: Medium Cooling Temperature
          description: Temperature above which medium cooling is applied
          default: 24
          selector:
            number:
              min: 20
              max: 35
              step: 0.5
              unit_of_measurement: "°C"
        
        heating_low_temp:
          name: Low Heating Temperature
          description: Temperature below which maximum heating is applied
          default: 18
          selector:
            number:
              min: 10
              max: 25
              step: 0.5
              unit_of_measurement: "°C"
        
        heating_medium_temp:
          name: Medium Heating Temperature
          description: Temperature below which medium heating is applied
          default: 20
          selector:
            number:
              min: 10
              max: 25
              step: 0.5
              unit_of_measurement: "°C"

    # Presence & Proximity Settings
    presence_settings:
      name: "Presence & Proximity"
      icon: mdi:account-multiple
      collapsed: true
      input:
        presence_persons:
          name: People to Track
          description: Select people for presence detection
          default: []
          selector:
            entity:
              multiple: true
              domain: person
        
        presence_devices:
          name: Presence Detection Devices
          description: Additional devices indicating presence (e.g., PC power states)
          default: []
          selector:
            entity:
              multiple: true
        
        proximity_sensor:
          name: Proximity Distance Sensor
          description: Sensor tracking nearest person's distance from home
          default: sensor.home_nearest_distance
          selector:
            entity:
              domain: sensor
        
        direction_sensor:
          name: Direction of Travel Sensor
          description: Sensor tracking direction of travel (towards/away/arrived)
          default: sensor.home_nearest_direction_of_travel
          selector:
            entity:
              domain: sensor
        
        home_zone_distance:
          name: Home Zone Distance
          description: >
            Distance defining your "home zone" boundary. Controls all proximity behaviors:
            • Within this distance: Maintain comfort temperature, pre-condition when approaching
            • Beyond this distance: Switch to away mode (off or eco mode)
          default: 5000
          selector:
            number:
              min: 1000
              max: 10000
              step: 500
              unit_of_measurement: m

    # Away Mode Settings
    away_settings:
      name: "Away Mode Settings"
      icon: mdi:home-export-outline
      collapsed: true
      input:
        enable_away_mode:
          name: Enable Away Mode
          description: Turn off or set to eco when everyone leaves
          default: true
          selector:
            boolean:
        
        away_mode_action:
          name: Away Mode Action
          description: >
            What to do when everyone leaves home:
            • OFF: Turn AC completely off (saves most energy, slow to cool when returning)
            • ECO: Reduce to eco mode with wider temperature range (balanced energy savings)
            • MAINTAIN: Keep current temperature (wastes energy but fastest comfort when returning)
          default: "eco"
          selector:
            select:
              options:
                - "off"
                - "eco"
                - "maintain"
        
        enable_pre_conditioning:
          name: Enable Pre-conditioning
          description: Pre-cool/heat when approaching home
          default: true
          selector:
            boolean:

    # Smart Mode Settings
    smart_mode_settings:
      name: "Smart Mode Settings"
      icon: mdi:brain
      collapsed: true
      input:
        helper_control_mode:
          name: Control Mode Helper Entity
          description: >
            Input Select helper for control mode (Auto/Manual/Smart).
            Example: input_select.climate_control_mode_living_room
          selector:
            entity:
              domain: input_select
        
        helper_presence_detected:
          name: Last Presence Helper Entity
          description: >
            Input DateTime helper to track when presence was last detected.
            Example: input_datetime.presence_last_detected_living_room
          selector:
            entity:
              domain: input_datetime
        
        helper_proximity_override:
          name: Proximity Override Helper Entity
          description: >
            Input Boolean helper for emergency temperature override.
            Example: input_boolean.climate_proximity_override_living_room
          selector:
            entity:
              domain: input_boolean
        
        presence_timeout_minutes:
          name: Presence Timeout
          description: >
            Minutes to wait after leaving room before taking action.
            Prevents shutdown during brief departures (bathroom, etc.)
          default: 15
          selector:
            number:
              min: 5
              max: 60
              step: 5
              unit_of_measurement: minutes
        
        room_presence_sensors:
          name: Room Presence Sensors (Optional)
          description: >
            BLE, PIR or other sensors for room-specific presence.
            For BLE area sensors, use the sensor that reports room names (e.g., sensor.phone_ble_area).
            For PIR sensors, use binary sensors that report on/off.
          default: []
          selector:
            entity:
              multiple: true
              domain: 
                - binary_sensor
                - sensor
        
        room_name_for_ble:
          name: Room Name for BLE Detection (Optional)
          description: >
            If using BLE area sensors, specify the exact room name that indicates presence.
            Example: "Office" for sensor.phone_ble_area when it reports "Office"
          default: ""
          selector:
            text:
        
        smart_mode_behavior:
          name: Smart Mode Behavior
          description: >
            What to do when briefly away in Smart mode.
            Eco: Switch to eco mode | Maintain: Keep current temp | Off: Turn off
          default: "eco"
          selector:
            select:
              options:
                - "eco"
                - "maintain"
                - "off"

    # Fan & Swing Settings
    fan_settings:
      name: "Fan & Swing Settings"
      icon: mdi:fan
      collapsed: true
      input:
        fan_speed_max:
          name: Maximum Fan Speed
          description: Fan speed for maximum cooling/heating
          default: "Level 5"
          selector:
            select:
              options:
                - "auto"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "high"
                - "medium"
                - "low"
        
        fan_speed_medium:
          name: Medium Fan Speed
          description: Fan speed for medium cooling/heating
          default: "Level 4"
          selector:
            select:
              options:
                - "auto"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "high"
                - "medium"
                - "low"
        
        fan_speed_eco:
          name: Eco Fan Speed
          description: Fan speed for eco mode (comfort zone)
          default: "Level 2"
          selector:
            select:
              options:
                - "auto"
                - "Level 1"
                - "Level 2"
                - "Level 3"
                - "Level 4"
                - "Level 5"
                - "high"
                - "medium"
                - "low"
        
        swing_mode_active:
          name: Active Swing Mode
          description: Swing mode when actively cooling/heating
          default: "both"
          selector:
            select:
              options:
                - "off"
                - "both"
                - "vertical"
                - "horizontal"

    # Power Efficiency Settings
    efficiency_settings:
      name: "Power Efficiency Settings"
      icon: mdi:leaf
      collapsed: true
      input:
        enable_eco_mode:
          name: Enable Eco Mode
          description: Use eco mode in comfort zone instead of turning off
          default: true
          selector:
            boolean:
        
        eco_mode_setpoint_offset:
          name: Eco Mode Setpoint Offset
          description: Degrees to adjust setpoint in eco mode (reduces cycling)
          default: 1
          selector:
            number:
              min: 0
              max: 3
              step: 0.5
              unit_of_measurement: "°C"
        
        min_runtime_minutes:
          name: Minimum Runtime
          description: Minimum minutes A/C must run before allowing mode change
          default: 10
          selector:
            number:
              min: 5
              max: 30
              unit_of_measurement: minutes
        
        min_off_time_minutes:
          name: Minimum Off Time
          description: Minimum minutes A/C must be off before restarting
          default: 5
          selector:
            number:
              min: 3
              max: 15
              unit_of_measurement: minutes
        
        enable_gradual_adjustment:
          name: Enable Gradual Temperature Adjustment
          description: Gradually adjust temperature instead of immediate changes
          default: true
          selector:
            boolean:
        
        extreme_temp_override:
          name: Extreme Temperature Override
          description: >
            Temperature thresholds that override Manual mode for safety.
            Above high or below low will activate climate even in Manual mode.
          default: true
          selector:
            boolean:
        
        extreme_high_temp:
          name: Extreme High Temperature
          description: Safety threshold - activate cooling even in Manual mode
          default: 30
          selector:
            number:
              min: 28
              max: 35
              step: 0.5
              unit_of_measurement: "°C"
        
        extreme_low_temp:
          name: Extreme Low Temperature
          description: Safety threshold - activate heating even in Manual mode
          default: 15
          selector:
            number:
              min: 10
              max: 18
              step: 0.5
              unit_of_measurement: "°C"

    # Advanced Settings
    advanced_settings:
      name: "Advanced Settings"
      icon: mdi:cog
      collapsed: true
      input:
        enable_dynamic_adaptation:
          name: Enable Dynamic Adaptation
          description: >
            Automatically escalate/de-escalate cooling/heating power based on effectiveness.
            System learns and adjusts when current mode isn't reaching target temperature.
          default: true
          selector:
            boolean:
        
        effectiveness_check_minutes:
          name: Effectiveness Check Interval
          description: Minutes to wait before checking if current mode is working
          default: 10
          selector:
            number:
              min: 5
              max: 30
              unit_of_measurement: minutes
        
        escalation_temp_tolerance:
          name: Temperature Stall Tolerance
          description: >
            Degrees of acceptable temperature drift before escalating power.
            Lower = more aggressive, Higher = more patient
          default: 1.0
          selector:
            number:
              min: 0.5
              max: 3.0
              step: 0.5
              unit_of_measurement: "°C"
        
        deescalation_approach_threshold:
          name: De-escalation Approach Threshold
          description: >
            Degrees from target when system can de-escalate power.
            When within this range and trending correctly, reduce power.
          default: 2.0
          selector:
            number:
              min: 1.0
              max: 4.0
              step: 0.5
              unit_of_measurement: "°C"
        
        helper_temp_history:
          name: Temperature History Helper (Optional)
          description: >
            Input Number helper to store previous temperature reading.
            Required for dynamic adaptation. Example: input_number.climate_temp_history_living_room
          default: []
          selector:
            entity:
              domain: input_number
        
        helper_trend_direction:
          name: Trend Direction Helper (Optional)
          description: >
            Input Text helper to track temperature trend (rising/falling/stable).
            Required for dynamic adaptation. Example: input_text.climate_trend_direction_living_room
          default: []
          selector:
            entity:
              domain: input_text
        
        helper_mode_start_time:
          name: Mode Start Time Helper (Optional)
          description: >
            Input DateTime helper to track when current mode started.
            Required for dynamic adaptation. Example: input_datetime.climate_mode_start_time_living_room
          default: []
          selector:
            entity:
              domain: input_datetime
        
        helper_effectiveness_score:
          name: Effectiveness Score Helper (Optional)
          description: >
            Input Number helper to track how well current mode is working (0-100%).
            Required for dynamic adaptation. Example: input_number.climate_effectiveness_score_living_room
          default: []
          selector:
            entity:
              domain: input_number
        
        enable_debug_logging:
          name: Enable Debug Logging
          description: >
            Enable detailed warning-level logs for troubleshooting.
            View logs in Settings → System → Logs.
            WARNING: This will create many log entries!
          default: false
          selector:
            boolean:
        
        check_interval_minutes:
          name: Check Interval
          description: >
            How often to check conditions and evaluate temperature (in minutes).
            The automation will run exactly at this interval.
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
              unit_of_measurement: minutes
              mode: slider

    # Notification Settings
    notifications:
      name: "Notification Settings"
      icon: mdi:bell
      collapsed: true
      input:
        enable_notifications:
          name: Enable Notifications
          description: Send notifications about climate changes
          default: true
          selector:
            boolean:
        
        notification_service:
          name: Notification Service
          description: Service to use for notifications
          default: notify.notify
          selector:
            text:
        
        additional_notify_services:
          name: Additional Notification Services
          description: Additional services to notify (e.g., notify.mobile_app_phone)
          default: []
          selector:
            text:
              multiple: true

variables:
  climate_list: !input climate_entities
  persons: !input presence_persons
  devices: !input presence_devices
  eco_enabled: !input enable_eco_mode
  gradual_enabled: !input enable_gradual_adjustment
  away_action: !input away_mode_action
  temp_sensor: !input temperature_sensor
  use_avg: !input use_average_temperature
  helper_mode: !input helper_last_mode
  helper_change: !input helper_last_change
  proximity_sensor_input: !input proximity_sensor
  direction_sensor_input: !input direction_sensor
  cooling_high_temp: !input cooling_high_temp
  cooling_medium_temp: !input cooling_medium_temp
  heating_low_temp: !input heating_low_temp
  heating_medium_temp: !input heating_medium_temp
  comfort_min_temp: !input comfort_min_temp
  comfort_max_temp: !input comfort_max_temp
  cooling_target_temp: !input cooling_target_temp
  heating_target_temp: !input heating_target_temp
  enable_pre_conditioning: !input enable_pre_conditioning
  enable_away_mode: !input enable_away_mode
  enable_notifications: !input enable_notifications
  eco_mode_setpoint_offset: !input eco_mode_setpoint_offset
  # Dynamic adaptation settings
  dynamic_enabled: !input enable_dynamic_adaptation
  effectiveness_check_mins: !input effectiveness_check_minutes
  temp_tolerance: !input escalation_temp_tolerance
  deescalation_threshold: !input deescalation_approach_threshold
  helper_temp_history: !input helper_temp_history
  helper_trend: !input helper_trend_direction
  helper_mode_time: !input helper_mode_start_time
  helper_effectiveness: !input helper_effectiveness_score
  last_mode: "{{ states(helper_mode) | default('off') }}"
  last_change: "{{ states(helper_change) | default(now()) }}"
  runtime_min: !input min_runtime_minutes
  offtime_min: !input min_off_time_minutes
  # Smart mode settings
  control_mode_helper: !input helper_control_mode
  presence_detected_helper: !input helper_presence_detected
  proximity_override_helper: !input helper_proximity_override
  presence_timeout: !input presence_timeout_minutes
  home_zone_distance: !input home_zone_distance
  room_sensors: !input room_presence_sensors
  room_ble_name: !input room_name_for_ble
  smart_behavior: !input smart_mode_behavior
  extreme_override: !input extreme_temp_override
  extreme_high: !input extreme_high_temp
  extreme_low: !input extreme_low_temp

trigger:
  - platform: state
    entity_id: !input climate_entities
    attribute: current_temperature
    id: temp_change
  
  - platform: state
    entity_id: !input temperature_sensor
    id: external_temp_change
  
  # Single time pattern trigger based on selected interval
  - platform: time_pattern
    minutes: "/1"
    id: periodic_check
  
  - platform: state
    entity_id: !input direction_sensor
    to: "towards"
    id: heading_home
  
  - platform: state
    entity_id: !input direction_sensor
    to: "arrived"
    id: arrived
  
  - platform: state
    entity_id: !input presence_persons
    id: presence_change
  
  - platform: state
    entity_id: !input presence_devices
    id: device_change

condition: []

action:
  # Store inputs as variables first
  - variables:
      check_interval: !input check_interval_minutes
      debug_enabled: !input enable_debug_logging
      proximity_sensor: "{{ proximity_sensor_input if proximity_sensor_input not in [none, '', 'unavailable', 'unknown'] else none }}"
      direction_sensor: "{{ direction_sensor_input if direction_sensor_input not in [none, '', 'unavailable', 'unknown'] else none }}"
      # Dynamic adaptation variables
      previous_temp: >
        {% if helper_temp_history %}
          {{ states(helper_temp_history) | float(0) }}
        {% else %}
          0
        {% endif %}
      current_trend: >
        {% if helper_trend %}
          {{ states(helper_trend) | default('stable') }}
        {% else %}
          stable
        {% endif %}
      mode_start_time: >
        {% if helper_mode_time %}
          {{ states(helper_mode_time) | default(now()) | as_datetime }}
        {% else %}
          {{ now() }}
        {% endif %}
      current_effectiveness: >
        {% if helper_effectiveness %}
          {{ states(helper_effectiveness) | float(50) }}
        {% else %}
          50
        {% endif %}
      should_proceed: >
        {% if trigger.id == 'periodic_check' %}
          {% set mins = now().minute %}
          {% set interval = check_interval | int(1) %}
          {% if interval > 0 %}
            {{ (mins % interval) == 0 }}
          {% else %}
            true
          {% endif %}
        {% else %}
          true
        {% endif %}
  
  # Continue with automation if conditions are met
  - condition: template
    value_template: "{{ should_proceed }}"
  
  # Debug: Log automation trigger
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        🔍 CLIMATE DEBUG: Automation triggered
        Trigger: {{ trigger.id }}
        Platform: {{ trigger.platform }}
        Entity: {{ trigger.entity_id | default('N/A') }}
        Selected Interval: {{ check_interval }} minutes
      level: warning
      logger: blueprints.climate_control
  
  - variables:
      current_temp: >
        {% if temp_sensor %}
          {{ states(temp_sensor) | float }}
        {% elif use_avg %}
          {% set temps = namespace(values=[]) %}
          {% for entity in climate_list %}
            {% set temps.values = temps.values + [state_attr(entity, 'current_temperature')] %}
          {% endfor %}
          {{ temps.values | average | round(1) }}
        {% else %}
          {{ state_attr(climate_list[0], 'current_temperature') | float }}
        {% endif %}
      
      anyone_home: >
        {% set home = namespace(value=false) %}
        {% for person in persons %}
          {% if is_state(person, 'home') %}
            {% set home.value = true %}
          {% endif %}
        {% endfor %}
        {% if not home.value %}
          {% for device in devices %}
            {% if is_state(device, 'on') or is_state(device, 'PowerOn') %}
              {% set home.value = true %}
            {% endif %}
          {% endfor %}
        {% endif %}
        {{ home.value }}
      
      approaching_home: >
        {% if direction_sensor and proximity_sensor %}
          {{ is_state(direction_sensor, 'towards') and 
             states(proximity_sensor) | float(10000) < home_zone_distance }}
        {% else %}
          false
        {% endif %}
      
      time_since_change: >
        {{ (as_timestamp(now()) - as_timestamp(states[climate_list[0]].last_changed)) / 60 }}
      
      # Dynamic adaptation calculations
      time_in_current_mode: >
        {% set mode_time_val = states(helper_mode_time) if helper_mode_time else 'unknown' %}
        {% if mode_time_val not in ['unknown', 'unavailable', '', None] %}
          {{ ((as_timestamp(now()) - as_timestamp(mode_time_val)) / 60) | round(1) | abs }}
        {% else %}
          0
        {% endif %}
      
      temp_change_rate: >
        {% if previous_temp > 0 and current_temp != previous_temp %}
          {% set interval_num = check_interval | int(1) %}
          {% if interval_num > 0 %}
            {{ ((current_temp - previous_temp) / interval_num) | round(2) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      
      calculated_trend: >
        {% if temp_change_rate > 0.2 %}
          rising
        {% elif temp_change_rate < -0.2 %}
          falling  
        {% else %}
          stable
        {% endif %}
      
      distance_from_target: >
        {% if current_temp > comfort_max_temp %}
          {{ (current_temp - cooling_target_temp) | abs }}
        {% elif current_temp < comfort_min_temp %}
          {{ (current_temp - heating_target_temp) | abs }}
        {% else %}
          0
        {% endif %}
      
      should_escalate: >
        {% if not dynamic_enabled %}
          false
        {% elif time_in_current_mode < effectiveness_check_mins %}
          false
        {% elif last_mode in ['cooling', 'heating'] and calculated_trend == 'rising' and current_temp > comfort_max_temp %}
          true
        {% elif last_mode in ['cooling', 'heating'] and calculated_trend == 'falling' and current_temp < comfort_min_temp %}
          true
        {% elif distance_from_target > temp_tolerance and calculated_trend == 'stable' %}
          true
        {% else %}
          false
        {% endif %}
      
      # Smart mode calculations
      control_mode: >
        {% if control_mode_helper %}
          {{ states(control_mode_helper) | default('Auto') }}
        {% else %}
          Auto
        {% endif %}
      
      room_presence_detected: >
        {% set presence = namespace(value=false) %}
        {% for sensor in room_sensors %}
          {% set sensor_state = states(sensor) | lower %}
          {% if is_state(sensor, 'on') or is_state(sensor, 'detected') or is_state(sensor, 'occupied') %}
            {% set presence.value = true %}
          {% elif room_ble_name and sensor_state == room_ble_name | lower %}
            {% set presence.value = true %}
          {% elif sensor_state in ['home', 'present'] %}
            {% set presence.value = true %}
          {% endif %}
        {% endfor %}
        {{ presence.value }}
      
      last_presence_time: >
        {% if presence_detected_helper and states(presence_detected_helper) not in ['unknown', 'unavailable', ''] %}
          {{ states(presence_detected_helper) | as_datetime }}
        {% else %}
          {{ now() }}
        {% endif %}
      
      minutes_since_presence: >
        {% if room_presence_detected %}
          0
        {% else %}
          {% set presence_time_val = states(presence_detected_helper) if presence_detected_helper else 'unknown' %}
          {% if presence_time_val not in ['unknown', 'unavailable', '', None] %}
            {{ ((as_timestamp(now()) - as_timestamp(presence_time_val)) / 60) | round(0) | abs }}
          {% else %}
            999
          {% endif %}
        {% endif %}
      
      current_distance: >
        {% if proximity_sensor %}
          {{ states(proximity_sensor) | float(99999) }}
        {% else %}
          99999
        {% endif %}
      
      proximity_zone: >
        {% if current_distance < home_zone_distance %}
          home
        {% else %}
          away
        {% endif %}
      
      smart_presence_active: >
        {% if control_mode == 'Manual' %}
          false
        {% elif room_presence_detected %}
          true
        {% elif minutes_since_presence < presence_timeout %}
          true
        {% elif proximity_zone == 'home' %}
          true
        {% elif anyone_home and control_mode == 'Auto' %}
          true
        {% else %}
          false
        {% endif %}
      
      extreme_temp_detected: >
        {% if not extreme_override %}
          false
        {% elif current_temp > extreme_high %}
          hot
        {% elif current_temp < extreme_low %}
          cold
        {% else %}
          false
        {% endif %}
      
      should_activate: >
        {% if control_mode == 'Manual' and extreme_temp_detected %}
          true
        {% elif control_mode == 'Manual' %}
          false
        {% elif control_mode == 'Smart' %}
          {{ smart_presence_active }}
        {% else %}
          {{ anyone_home or approaching_home }}
        {% endif %}
  
  # Update presence helper if room presence is detected
  - condition: template
    value_template: "{{ room_presence_detected and presence_detected_helper not in [none, '', 'unavailable', 'unknown'] }}"
  - service: input_datetime.set_datetime
    target:
      entity_id: "{{ presence_detected_helper }}"
    data:
      datetime: "{{ now() }}"
  
  - variables:
      should_deescalate: >
        {% if not dynamic_enabled %}
          false
        {% elif distance_from_target <= deescalation_threshold and calculated_trend != 'stable' %}
          {% if current_temp > comfort_max_temp and calculated_trend == 'falling' %}
            true
          {% elif current_temp < comfort_min_temp and calculated_trend == 'rising' %}
            true
          {% else %}
            false
          {% endif %}
        {% else %}
          false
        {% endif %}
  
  # Debug: Log current conditions
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        🔍 CLIMATE DEBUG: Current Conditions & Dynamic Analysis
        Temperature: {{ current_temp }}°C (Previous: {{ previous_temp }}°C)
        Anyone Home: {{ anyone_home }}
        Approaching: {{ approaching_home }}
        Last Mode: {{ last_mode }}
        Time Since Change: {{ time_since_change | round(1) }} min
        Comfort Zone: {{ comfort_min_temp }}-{{ comfort_max_temp }}°C
        Thresholds - Cool Med: {{ cooling_medium_temp }}°C, Cool High: {{ cooling_high_temp }}°C
        Thresholds - Heat Med: {{ heating_medium_temp }}°C, Heat Low: {{ heating_low_temp }}°C
        
        🧠 DYNAMIC ANALYSIS:
        Trend: {{ calculated_trend }} ({{ temp_change_rate }}°C/min)
        Time in Mode: {{ time_in_current_mode }} min
        Distance from Target: {{ distance_from_target }}°C
        Should Escalate: {{ should_escalate }}
        Should De-escalate: {{ should_deescalate }}
        Effectiveness: {{ current_effectiveness }}%
      level: warning
      logger: blueprints.climate_control
  
  # Update temperature history and trend tracking
  - condition: template
    value_template: "{{ dynamic_enabled and helper_temp_history not in [none, '', 'unavailable', 'unknown'] }}"
  - service: input_number.set_value
    target:
      entity_id: "{{ helper_temp_history }}"
    data:
      value: "{{ current_temp }}"
  
  - condition: template
    value_template: "{{ dynamic_enabled and helper_trend not in [none, '', 'unavailable', 'unknown'] }}"  
  - service: input_text.set_value
    target:
      entity_id: "{{ helper_trend }}"
    data:
      value: "{{ calculated_trend }}"

  - choose:
      # Dynamic Escalation - Override normal logic if escalation needed
      - conditions:
          - condition: template
            value_template: "{{ should_escalate }}"
          - condition: template
            value_template: "{{ should_activate }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔥 CLIMATE DEBUG: DYNAMIC ESCALATION ACTIVATED
                Reason: {{ 'Temperature rising when cooling' if calculated_trend == 'rising' and current_temp > comfort_max_temp else 
                          'Temperature falling when heating' if calculated_trend == 'falling' and current_temp < comfort_min_temp else
                          'Temperature stalled for ' ~ time_in_current_mode ~ ' minutes' }}
                Escalating to maximum power mode
              level: warning
              logger: blueprints.climate_control
          
          # Force maximum cooling/heating mode
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                        cool
                      {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                        heat
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if current_temp > comfort_max_temp %}
                  {{ cooling_target_temp }}
                {% elif current_temp < comfort_min_temp %}
                  {{ heating_target_temp }}
                {% else %}
                  {{ ((comfort_min_temp + comfort_max_temp) / 2) | round(1) }}
                {% endif %}
          
          # Set maximum fan speed
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif desired_max_fan == 'Level 5' and '5' in available_fans %}
                        5
                      {% elif desired_max_fan == '5' and 'Level 5' in available_fans %}
                        Level 5
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'auto' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: >
                {% if current_temp > comfort_max_temp %}
                  cooling_escalated
                {% else %}
                  heating_escalated  
                {% endif %}
          
          # Record mode start time
          - condition: template
            value_template: "{{ helper_mode_time not in [none, '', 'unavailable', 'unknown'] }}"
          - service: input_datetime.set_datetime
            target:
              entity_id: "{{ helper_mode_time }}"
            data:
              datetime: "{{ now() }}"

      # Dynamic De-escalation - Reduce power when approaching target effectively  
      - conditions:
          - condition: template
            value_template: "{{ should_deescalate }}"
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ last_mode in ['cooling_escalated', 'heating_escalated'] }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                📉 CLIMATE DEBUG: DYNAMIC DE-ESCALATION
                Reason: Approaching target effectively
                Distance: {{ distance_from_target }}°C, Trend: {{ calculated_trend }}
                Reducing to medium power mode
              level: warning
              logger: blueprints.climate_control
          
          # Switch to medium mode (similar to normal medium cooling/heating)
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                        cool
                      {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                        heat
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          # Set medium fan speed
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_medium_fan: !input fan_speed_medium
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_medium_fan in available_fans %}
                        {{ desired_medium_fan }}
                      {% elif desired_medium_fan == 'Level 3' and '3' in available_fans %}
                        3
                      {% elif desired_medium_fan == '3' and 'Level 3' in available_fans %}
                        Level 3
                      {% elif 'Level 3' in available_fans %}
                        Level 3
                      {% elif '3' in available_fans %}
                        3
                      {% elif 'medium' in available_fans %}
                        medium
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'auto' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: >
                {% if current_temp > comfort_max_temp %}
                  cooling_deescalated
                {% else %}
                  heating_deescalated
                {% endif %}

      # Pre-conditioning when approaching
      - conditions:
          - condition: template
            value_template: "{{ enable_pre_conditioning }}"
          - condition: template
            value_template: "{{ approaching_home }}"
          - condition: template
            value_template: "{{ current_temp > cooling_medium_temp or current_temp < heating_medium_temp }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: Pre-conditioning activated
                Reason: Approaching home
                {% if proximity_sensor %}Distance: {{ states(proximity_sensor) }}m{% endif %}
                Temperature: {{ current_temp }}°C needs adjustment
              level: warning
              logger: blueprints.climate_control
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: !input precool_target_temp
          
          - service: climate.set_fan_mode
            target:
              entity_id: !input climate_entities
            data:
              fan_mode: >
                {% set available_fans = state_attr(climate_list[0], 'fan_modes') | list %}
                {% set desired_medium_fan = fan_speed_medium %}
                {% if desired_medium_fan in available_fans %}
                  {{ desired_medium_fan }}
                {% elif desired_medium_fan == 'Level 3' and '3' in available_fans %}
                  3
                {% elif desired_medium_fan == '3' and 'Level 3' in available_fans %}
                  Level 3
                {% elif 'Level 3' in available_fans %}
                  Level 3
                {% elif '3' in available_fans %}
                  3
                {% elif 'medium' in available_fans %}
                  medium
                {% elif 'Auto' in available_fans %}
                  Auto
                {% else %}
                  {{ available_fans[-1] if available_fans else 'auto' }}
                {% endif %}
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Pre-conditioning"
              message: >
                Pre-conditioning started - approaching home.
                Current: {{ current_temp }}°C
      
      # Away mode (Smart Mode Compatible)
      - conditions:
          - condition: template
            value_template: "{{ enable_away_mode }}"
          - condition: template
            value_template: "{{ not should_activate }}"
          - condition: template
            value_template: "{{ time_since_change > offtime_min }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: Away mode activated
                Action: {{ away_action }}
                Nobody home detected
                Time since last change: {{ time_since_change | round(1) }} min
              level: warning
              logger: blueprints.climate_control
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ away_action == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entities
              
              - conditions:
                  - condition: template
                    value_template: "{{ away_action == 'eco' }}"
                sequence:
                  # Set HVAC mode with auto preference and fallback for away eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                                cool
                              {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                                heat
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {% if current_temp > comfort_max_temp %}
                          {{ cooling_target_temp + eco_mode_setpoint_offset }}
                        {% else %}
                          {{ heating_target_temp - eco_mode_setpoint_offset }}
                        {% endif %}
                  
                  # Set eco fan mode with compatibility check
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                            desired_eco_fan: !input fan_speed_eco
                        - service: climate.set_fan_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            fan_mode: >
                              {% if desired_eco_fan in available_fans %}
                                {{ desired_eco_fan }}
                              {% elif desired_eco_fan == 'Level 2' and '2' in available_fans %}
                                2
                              {% elif desired_eco_fan == '2' and 'Level 2' in available_fans %}
                                Level 2
                              {% elif desired_eco_fan == 'Level 1' and '1' in available_fans %}
                                1
                              {% elif desired_eco_fan == '1' and 'Level 1' in available_fans %}
                                Level 1
                              {% elif 'Level 2' in available_fans %}
                                Level 2
                              {% elif '2' in available_fans %}
                                2
                              {% elif 'Level 1' in available_fans %}
                                Level 1
                              {% elif '1' in available_fans %}
                                1
                              {% elif 'low' in available_fans %}
                                low
                              {% elif 'Auto' in available_fans %}
                                Auto
                              {% else %}
                                {{ available_fans[0] if available_fans else 'auto' }}
                              {% endif %}
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Away Mode"
              message: "{{ away_action | title }} mode activated - nobody home"
      
      # High cooling mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp > cooling_high_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'cooling' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: HIGH COOLING MODE
                Temperature: {{ current_temp }}°C > {{ cooling_high_temp }}°C
                Target: {{ cooling_target_temp }}°C
                Fan: Maximum
              level: warning
              logger: blueprints.climate_control
          
          # Set HVAC mode with auto preference and fallback
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                - service: climate.set_hvac_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    hvac_mode: >
                      {% if 'auto' in available_modes %}
                        auto
                      {% elif 'cool' in available_modes %}
                        cool
                      {% elif 'heat_cool' in available_modes %}
                        heat_cool
                      {% else %}
                        {{ available_modes[0] if available_modes else 'off' }}
                      {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if gradual_enabled %}
                  {{ [cooling_target_temp, current_temp - 2] | max }}
                {% else %}
                  {{ cooling_target_temp }}
                {% endif %}
          
          # Set fan mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif desired_max_fan == 'Level 5' and '5' in available_fans %}
                        5
                      {% elif desired_max_fan == '5' and 'Level 5' in available_fans %}
                        Level 5
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "cooling"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "High cooling mode - {{ current_temp }}°C"
      
      # Medium cooling mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp > cooling_medium_temp and current_temp <= cooling_high_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'cooling' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: MEDIUM COOLING MODE
                Temperature: {{ current_temp }}°C ({{ cooling_medium_temp }}-{{ cooling_high_temp }}°C range)
                Target: {{ cooling_target_temp }}°C
                Fan: Medium
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: >
                {% if gradual_enabled %}
                  {{ [cooling_target_temp, current_temp - 1] | max }}
                {% else %}
                  {{ cooling_target_temp }}
                {% endif %}
          
          # Set fan mode with compatibility check for medium speed
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_medium_fan: !input fan_speed_medium
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_medium_fan in available_fans %}
                        {{ desired_medium_fan }}
                      {% elif desired_medium_fan == 'Level 3' and '3' in available_fans %}
                        3
                      {% elif desired_medium_fan == '3' and 'Level 3' in available_fans %}
                        Level 3
                      {% elif 'Level 3' in available_fans %}
                        Level 3
                      {% elif '3' in available_fans %}
                        3
                      {% elif 'medium' in available_fans %}
                        medium
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'auto' }}
                      {% endif %}
          
          # Set swing mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_swings: "{{ state_attr(repeat.item, 'swing_modes') | list }}"
                    desired_swing: !input swing_mode_active
                - service: climate.set_swing_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    swing_mode: >
                      {% if desired_swing in available_swings %}
                        {{ desired_swing }}
                      {% elif desired_swing == 'both' and '3D' in available_swings %}
                        3D
                      {% elif desired_swing == 'both' and 'Both' in available_swings %}
                        Both
                      {% elif desired_swing == 'vertical' and 'Vertical' in available_swings %}
                        Vertical
                      {% elif desired_swing == 'Vertical' and 'vertical' in available_swings %}
                        vertical
                      {% elif desired_swing == 'horizontal' and 'Horizontal' in available_swings %}
                        Horizontal
                      {% elif desired_swing == 'Horizontal' and 'horizontal' in available_swings %}
                        horizontal
                      {% elif 'both' in available_swings %}
                        both
                      {% elif 'Both' in available_swings %}
                        Both
                      {% elif '3D' in available_swings %}
                        3D
                      {% elif 'Vertical' in available_swings %}
                        Vertical
                      {% elif 'vertical' in available_swings %}
                        vertical
                      {% else %}
                        {{ available_swings[0] if available_swings else 'off' }}
                      {% endif %}
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "cooling"
      
      # Low heating mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp < heating_low_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'heating' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: HIGH HEATING MODE
                Temperature: {{ current_temp }}°C < {{ heating_low_temp }}°C
                Target: {{ heating_target_temp }}°C
                Fan: Maximum
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ heating_target_temp }}"
          
          # Set max fan mode with compatibility check
          - repeat:
              for_each: "{{ climate_list }}"
              sequence:
                - variables:
                    current_entity: "{{ repeat.item }}"
                    available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                    desired_max_fan: !input fan_speed_max
                - service: climate.set_fan_mode
                  target:
                    entity_id: "{{ current_entity }}"
                  data:
                    fan_mode: >
                      {% if desired_max_fan in available_fans %}
                        {{ desired_max_fan }}
                      {% elif desired_max_fan == 'Level 5' and '5' in available_fans %}
                        5
                      {% elif desired_max_fan == '5' and 'Level 5' in available_fans %}
                        Level 5
                      {% elif 'Level 5' in available_fans %}
                        Level 5
                      {% elif '5' in available_fans %}
                        5
                      {% elif 'high' in available_fans %}
                        high
                      {% elif 'Auto' in available_fans %}
                        Auto
                      {% else %}
                        {{ available_fans[-1] if available_fans else 'auto' }}
                      {% endif %}
          
          - service: climate.set_swing_mode
            target:
              entity_id: !input climate_entities
            data:
              swing_mode: !input swing_mode_active
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "heating"
          
          - condition: template
            value_template: "{{ enable_notifications }}"
          
          - service: !input notification_service
            data:
              title: "Climate Control"
              message: "High heating mode - {{ current_temp }}°C"
      
      # Medium heating mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp < heating_medium_temp and current_temp >= heating_low_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min or last_mode != 'heating' }}"
        sequence:
          - condition: template
            value_template: "{{ debug_enabled }}"
          - service: system_log.write
            data:
              message: >
                🔍 CLIMATE DEBUG: MEDIUM HEATING MODE
                Temperature: {{ current_temp }}°C ({{ heating_low_temp }}-{{ heating_medium_temp }}°C range)
                Target: {{ heating_target_temp }}°C
                Fan: Medium
              level: warning
              logger: blueprints.climate_control
          
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entities
            data:
              hvac_mode: >
                {% if current_temp > comfort_max_temp %}
                  cool
                {% elif current_temp < comfort_min_temp %}
                  heat
                {% else %}
                  heat_cool
                {% endif %}
          
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entities
            data:
              temperature: "{{ heating_target_temp }}"
          
          - service: climate.set_fan_mode
            target:
              entity_id: !input climate_entities
            data:
              fan_mode: >
                {% set available_fans = state_attr(climate_list[0], 'fan_modes') | list %}
                {% set desired_medium_fan = fan_speed_medium %}
                {% if desired_medium_fan in available_fans %}
                  {{ desired_medium_fan }}
                {% elif desired_medium_fan == 'Level 3' and '3' in available_fans %}
                  3
                {% elif desired_medium_fan == '3' and 'Level 3' in available_fans %}
                  Level 3
                {% elif 'Level 3' in available_fans %}
                  Level 3
                {% elif '3' in available_fans %}
                  3
                {% elif 'medium' in available_fans %}
                  medium
                {% elif 'Auto' in available_fans %}
                  Auto
                {% else %}
                  {{ available_fans[-1] if available_fans else 'auto' }}
                {% endif %}
          
          - service: climate.set_swing_mode
            target:
              entity_id: !input climate_entities
            data:
              swing_mode: !input swing_mode_active
          
          - service: input_text.set_value
            target:
              entity_id: !input helper_last_mode
            data:
              value: "heating"
      
      # Comfort zone - Eco mode
      - conditions:
          - condition: template
            value_template: "{{ should_activate }}"
          - condition: template
            value_template: "{{ current_temp >= comfort_min_temp and current_temp <= comfort_max_temp }}"
          - condition: template
            value_template: "{{ time_since_change > runtime_min }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ eco_enabled }}"
                sequence:
                  # Eco mode - maintain with reduced fan and wider setpoint
                  # Set HVAC mode with auto preference and fallback for eco mode
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_modes: "{{ state_attr(repeat.item, 'hvac_modes') | list }}"
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            hvac_mode: >
                              {% if 'auto' in available_modes %}
                                auto
                              {% elif current_temp > comfort_max_temp and 'cool' in available_modes %}
                                cool
                              {% elif current_temp < comfort_min_temp and 'heat' in available_modes %}
                                heat
                              {% elif 'heat_cool' in available_modes %}
                                heat_cool
                              {% else %}
                                {{ available_modes[0] if available_modes else 'off' }}
                              {% endif %}
                  
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entities
                    data:
                      temperature: >
                        {{ 21.0 }}
                  
                  # Set eco fan mode with compatibility check
                  - repeat:
                      for_each: "{{ climate_list }}"
                      sequence:
                        - variables:
                            current_entity: "{{ repeat.item }}"
                            available_fans: "{{ state_attr(repeat.item, 'fan_modes') | list }}"
                            desired_eco_fan: !input fan_speed_eco
                        - service: climate.set_fan_mode
                          target:
                            entity_id: "{{ current_entity }}"
                          data:
                            fan_mode: >
                              {% if desired_eco_fan in available_fans %}
                                {{ desired_eco_fan }}
                              {% elif desired_eco_fan == 'Level 2' and '2' in available_fans %}
                                2
                              {% elif desired_eco_fan == '2' and 'Level 2' in available_fans %}
                                Level 2
                              {% elif desired_eco_fan == 'Level 1' and '1' in available_fans %}
                                1
                              {% elif desired_eco_fan == '1' and 'Level 1' in available_fans %}
                                Level 1
                              {% elif 'Level 2' in available_fans %}
                                Level 2
                              {% elif '2' in available_fans %}
                                2
                              {% elif 'Level 1' in available_fans %}
                                Level 1
                              {% elif '1' in available_fans %}
                                1
                              {% elif 'low' in available_fans %}
                                low
                              {% elif 'Auto' in available_fans %}
                                Auto
                              {% else %}
                                {{ available_fans[0] if available_fans else 'auto' }}
                              {% endif %}
                  
                  - service: climate.set_swing_mode
                    target:
                      entity_id: !input climate_entities
                    data:
                      swing_mode: "Off"
                  
                  - service: input_text.set_value
                    target:
                      entity_id: !input helper_last_mode
                    data:
                      value: "eco"
                  
                  - condition: template
                    value_template: "{{ enable_notifications }}"
                  
                  - service: !input notification_service
                    data:
                      title: "Climate Control"
                      message: "Eco mode - Comfort zone ({{ current_temp }}°C)"
            
            default:
              # Traditional off mode
              - service: climate.turn_off
                target:
                  entity_id: !input climate_entities
              
              - service: input_text.set_value
                target:
                  entity_id: !input helper_last_mode
                data:
                  value: "off"
              
              - condition: template
                value_template: "{{ enable_notifications }}"
              
              - service: !input notification_service
                data:
                  title: "Climate Control"
                  message: "Turned off - Comfort zone ({{ current_temp }}°C)"

  # Debug: No conditions matched
  - condition: template
    value_template: "{{ debug_enabled }}"
  - service: system_log.write
    data:
      message: >
        🔍 CLIMATE DEBUG: No action taken
        No conditions matched current state
        Temperature: {{ current_temp }}°C
        Anyone home: {{ anyone_home }}
        Last mode: {{ last_mode }}
      level: warning
      logger: blueprints.climate_control

mode: restart